//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Arcadia
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_cCHSLPlayerBoxSize = 176;
const int gv_cCHSLPlayerBoxExtra = 16;
const int gv_cCHSLPlayerBoxVerticalGap = 50;
const int gv_cCHSLPlayerBoxBorderSize = 40;
const int gv_cCHSLPlayerBoxnRows = 3;
const int gv_cCHSLPlayerBoxnCols = 2;
const int gv_cCHSLPlayerLabelExtraWidth = 24;
const int gv_cCHSLPlayerPortraitWidth = 120;
const int gv_cCHSLPlayerPortraitHeight = 120;
const int gv_cCHSLPlayerCheckmarkWidth = 160;
const int gv_cCHSLPlayerCheckmarkHeight = 160;
const int gv_cCHSLTimerBoxWidth = 180;
const int gv_cCHSLHeroButtonSize = 84;
const int gv_cCHSLHeroButtonIconSize = 76;
const int gv_cCHSLHeroButtonExtra = 4;
const int gv_cCHSLAbilityButtonSize = 100;
const int gv_cCHSLAbilityButtonIconSize = 92;
const int gv_cCHSLAbilityButtonExtra = 6;
const int gv_cCHSLHeaderHeight = 48;
const int gv_cCHSLHeaderGap = 4;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_AbilityButton {
    string lv_abilityIcon;
    text lv_abilityTooltip;
    text lv_abilityName;
};

struct gs_HeroButton {
    string lv_hero;
    string lv_icon;
    text lv_tooltip;
    int lv_iDNumber;
    fixed lv_modelScale;
    string lv_previewUnitType;
    string lv_previewCamera;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_wESTTEAM;
playergroup gv_eASTTEAM;
playergroup gv_humanPlayers;
string[16] gv_playerChampionTypes;
unit[16] gv_playerChampions;
point[4] gv_westteamspawnpoints;
point[4] gv_eastteamspawnpoints;
revealer[16] gv_debugrevealers;
fixed gv_aRLaunchPylonbase;
fixed gv_aRLaunchPylonratio;
fixed gv_aRPylonOverchargeattackbase;
fixed gv_aRPylonOverchargeattackratio;
fixed gv_aRCleavebase;
fixed gv_aRCleaveratio;
fixed gv_aRPersonalWarpattackbase;
fixed gv_aRPersonalWarpattackratio;
fixed gv_aRFluxclawsattackbase;
fixed gv_aRFluxclawsattackratio;
fixed gv_aRNutritiveVomitdirectbase;
fixed gv_aRNutritiveVomitdirectratio;
fixed gv_aRNutritiveVomithealbase;
fixed gv_aRNutritiveVomithealratio;
fixed gv_aRHookedTonguebase;
fixed gv_aRHookedTongueratio;
fixed gv_aRPouncebase;
fixed gv_aRPounceratio;
fixed gv_aRBombbase;
fixed gv_aRBombratio;
fixed gv_aRSnipebase;
fixed gv_aRSniperatio;
fixed gv_aRThrowBanelingdirectbase;
fixed gv_aRThrowBanelingdirectratio;
fixed gv_aRThrowBanelingDoTbase;
fixed gv_aRThrowBanelingDoTratio;
fixed gv_aRBileBlastdirectbase;
fixed gv_aRBileBlastdirectratio;
fixed gv_aRBileBlastzerglingattackbase;
fixed gv_aRBileBlastzerglingattackratio;
fixed gv_aRCorruptreflectbase;
fixed gv_aRCorruptreflectratio;
fixed gv_aRNydusWormdirectbase;
fixed gv_aRNydusWormdirectratio;
fixed gv_aRNydusWormroachattackbase;
fixed gv_aRNydusWormroachattackratio;
fixed gv_aRLightAspecthealbase;
fixed gv_aRLightAspecthealratio;
fixed gv_aRTorpedobase;
fixed gv_aRTorpedoratio;
fixed gv_aRDarkAspectbase;
fixed gv_aRDarkAspectratio;
fixed gv_aRGravityWellbase;
fixed gv_aRGravityWellratio;
fixed gv_aRSeekerBeambase;
fixed gv_aRSeekerBeamratio;
fixed gv_aRPurgedirectbase;
fixed gv_aRPurgedirectratio;
fixed gv_aRPurgebonusbase;
fixed gv_aRPurgebonusratio;
fixed gv_aRLongshockdamagebase;
fixed gv_aRLongshockdamageratio;
fixed gv_aRElectricRazorbase;
fixed gv_aRElectricRazorratio;
playergroup gv_playersnominimap;
playergroup gv_playerswithminimap;
fixed gv_aRSnapperbase;
fixed gv_aRSnapperratio;
fixed gv_aRRocketSentrybase;
fixed gv_aRRocketSentryratio;
fixed gv_aRFirefistGroundbase;
fixed gv_aRFirefistGroundratio;
fixed gv_aRFirefistAirbase;
fixed gv_aRFirefistAirratio;
fixed[9] gv_screamerrange;
fixed gv_screamerrangebonus;
fixed gv_screamerstartingrange;
fixed gv_aRPsionicStorminitialbase;
fixed gv_aRPsionicStorminitialratio;
fixed gv_aRPsionicStormDoTbase;
fixed gv_aRPsionicStormDoTratio;
fixed gv_aRRepeaterLancebase;
fixed gv_aRRepeaterLanceratio;
fixed gv_aRWildfireimpactbase;
fixed gv_aRWildfireimpactratio;
fixed gv_aRWildfirebonusbase;
fixed gv_aRWildfirebonusratio;
fixed gv_aRForceFieldbase;
fixed gv_aRForceFieldratio;
fixed gv_aRBlueFlamebase;
fixed gv_aRBlueFlameratio;
fixed gv_aRTurbobase;
fixed gv_aRTurboratio;
fixed gv_aRNapalmSpraybase;
fixed gv_aRNapalmSprayratio;
fixed gv_aROilPuddlefirebase;
fixed gv_aROilPuddlefireratio;
fixed gv_aRTwingalebase;
fixed gv_aRTwingaleratio;
fixed gv_aRGlacialTrailimpactbase;
fixed gv_aRGlacialTrailimpactratio;
fixed gv_aRGlacialTrailDoTbase;
fixed gv_aRGlacialTrailDoTratio;
fixed gv_aRFrostbiteattackbase;
fixed gv_aRFrostbiteattackratio;
fixed gv_aRIcebreakerbase;
fixed gv_aRIcebreakerratio;
fixed gv_aRThatawayattackbase;
fixed gv_aRThatawayattackratio;
fixed gv_aRLungebase;
fixed gv_aRLungeratio;
fixed gv_aRGraviticStompbase;
fixed gv_aRGraviticStompratio;
fixed gv_aRMaimattackbase;
fixed gv_aRMaimattackratio;
fixed gv_aRRadarMinebase;
fixed gv_aRRadarMineratio;
int gv_maximumRadarMines;
int gv_siegeMinionWaveCurrent;
int gv_siegeMinionInterval;
fixed gv_minionSpawnInterval;
timer gv_minionSpawnTimer;
point[3][3][3][4] gv_minionSpawnPoints;
int gv_jungleRespawnTime;
unitgroup[3][5] gv_jungleCamps;
timer[3][5] gv_jungleTimers;
int[3][5] gv_jungleTimerTextBoxes;
int gv_jungleInitialDelay;
fixed gv_monsterUpgradeInterval;
timer gv_monsterUpgradeTimer;
int gv_upgradeLevel;
int[3] gv_points;
int[3] gv_powerPoints;
fixed gv_pointsSearchRadius;
int gv_pointValueBase;
int gv_meleeModifier;
int gv_casterModifier;
int gv_siegeModifier;
fixed gv_aIKillMultiplier;
int gv_heroKillPointValueBase;
revealer gv_watchtowerRevealer;
int gv_revealerStatus;
int gv_captureTextTag;
fixed gv_watchtowercapturequantity;
fixed gv_watchtowercaptureconstant;
fixed gv_respawntimer;
playergroup gv_deadplayers;
fixed gv_platformHealingCoefficient;
fixed gv_minionUpgradeInterval;
timer gv_minionUpgradeTimer;
int gv_rSPNBox;
int gv_rSPNTimerNumberLabel;
int gv_rSPNTextLabel;
int gv_rSPNBoxWidth;
int gv_rSPNBoxHeight;
int gv_rSPNXOffset;
int gv_rSPNYOffset;
timer[9] gv_rSPNTimers;
int[3] gv_tMPTPointsBoxes;
int[3] gv_tMPTPointBoxBGs;
int[3] gv_tMPTPointBoxLabels;
int gv_tMPTMidBox;
int gv_tMPTTeamBoxWidth;
int gv_tMPTTeamBoxHeight;
int gv_tMPTTeamBoxXOffsetLeft;
int gv_tMPTTeamBoxXOffsetRight;
int gv_tMPTTeamBoxYOffset;
int gv_tMPTPointsLabelWidth;
int gv_tMPTPointsLabelHeight;
int gv_tMPTPointsLabelYOffset;
string gv_tMPTPointsLabelStyle;
int gv_tMPTMidBoxWidth;
int gv_tMPTMidBoxHeight;
int gv_tMPTMidBoxYOffset;
int gv_tMPTMidLabelWidth;
int gv_tMPTMidLabelHeight;
int gv_tMPTMidLabelYOffset;
string gv_tMPTMidLabelStyle;
int gv_championSelect;
int gv_cHSLHeaderLabel;
int[3][4] gv_playerBoxes;
int[3][4] gv_playerBoxLabels;
int[3][4] gv_playerBoxBackgrounds;
int[3][4] gv_playerPortraitImage;
int[3][4] gv_playerPortraitCheckmark;
int[3][4] gv_playerNames;
int[13] gv_heroButtons;
int[13] gv_heroIcons;
int[6] gv_heroAbilityButtons;
int[6] gv_heroAbilityButtonIcons;
int gv_timerDialog;
int gv_timerLabel;
int gv_lockinButton;
int gv_heroModelDialog;
int gv_heroModelItem;
int[16] gv_playerViewBoxID;
int gv_cHSLPlayerBoxHalf;
int gv_cCHSLPlayerLabelExtraWidthHalf;
int gv_cHSLPlayerLabelWidth;
int gv_cHSLPlayerLabelHeight;
int gv_cHSLPlayerPortraitInlayx;
int gv_cHSLPlayerPortraitInlayy;
int gv_cHSLPlayerCheckmarkInlayx;
int gv_cHSLPlayerCheckmarkInlayy;
fixed gv_cCHSLTimerDuration;
fixed gv_cCHSLTimerShortDuration;
timer gv_cCHSLTimer;
int gv_cCHSLTimerBeepstart;
bool gv_cCHSLTimerBeepstarted;
int gv_cCHSLTimerBoxWidthOffset;
int gv_cCHSLTimerBoxHeight;
int gv_cCHSLTimerBoxHeightOffset;
int gv_cCHSLTimerLabelWidth;
int gv_cCHSLTimerLabelHeight;
int gv_cHSLTimerLabelHeightOffset;
int gv_cHSLTimerLabelWidthOffset;
int gv_cHSLnHeroButtons;
int gv_cCHSLHeroButtonnCols;
int gv_cHSLHeroButtonnRows;
int gv_cHSLHeroButtonIconInlay;
int gv_cHSLAbilityButtonnCols;
int gv_cHSLAbilityButtonnRows;
int gv_cHSLAbilityButtonIconInlay;
int gv_cCHSLLockinButtonWidth;
int gv_cCHSLLockinButtonHeight;
int gv_cCHSLLockinButtonGap;
int gv_cCHSLHeroModelDialogWidth;
int gv_cCHSLHeroModelDialogGap;
int gv_cHSLHeroModelDialogHeight;
int gv_cCHSLHeroModelDialogExtraHeight;
int gv_cHSLHeroModelWidth;
int gv_cHSLHeroModelHeight;
int gv_cCHSLHeroModelBottomMargin;
int gv_cCHSLMiddleGapWidth;
int gv_nRows;
int gv_cCHSLHEIGHTBottomMargin;
int gv_cCHSLWIDTHHorizontalMargin;
int gv_cCHSLWIDTHPlayerBoxHorizontalGap;
int gv_cHSLWIDTHHeroButtons;
int gv_cCHSLWIDTHNewColPadding;
int gv_cCHSLHeaderLabelHeight;
int gv_cCHSLHeaderLabelWidth;
gs_AbilityButton[13][6] gv_abilityButton;
int gv_abilityButtonTicker;
gs_HeroButton[13] gv_heroButtonRecords;
int gv_numLockedInPlayers;

void InitGlobals () {
    int init_i;
    int init_j;

    gv_wESTTEAM = GameAttributePlayersForTeam(1);
    gv_eASTTEAM = GameAttributePlayersForTeam(2);
    gv_humanPlayers = PlayerGroupEmpty();
    gv_aRLaunchPylonbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "PylonDamage", "Amount", 0);
    gv_aRLaunchPylonratio = 0.5;
    gv_aRPylonOverchargeattackbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "PylonBasicAttackDamage", "Amount", 0);
    gv_aRPylonOverchargeattackratio = 0.8;
    gv_aRCleavebase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "CleaveSpellDamage", "Amount", 0);
    gv_aRCleaveratio = 0.75;
    gv_aRPersonalWarpattackbase = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "PersonalWarpAttack", "Modification.DamageDealtScaled[" + IntToString(1) + "]", 0);
    gv_aRPersonalWarpattackratio = 0.35;
    gv_aRFluxclawsattackbase = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "Fluxclaws", "Modification.DamageDealtScaled[" + IntToString(1) + "]", 0);
    gv_aRFluxclawsattackratio = 0.5;
    gv_aRNutritiveVomitdirectbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "VileBurstDamage", "Amount", 0);
    gv_aRNutritiveVomitdirectratio = 0.75;
    gv_aRNutritiveVomithealbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "VileBurstHeal", "VitalArray[" + IntToString(0) + "].Change", 0);
    gv_aRNutritiveVomithealratio = 1.0;
    gv_aRHookedTonguebase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HookedTonguesDamage", "Amount", 0);
    gv_aRHookedTongueratio = 0.5;
    gv_aRPouncebase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "PounceImpactDamage", "Amount", 0);
    gv_aRPounceratio = 1.25;
    gv_aRBombbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "BombDamage", "Amount", 0);
    gv_aRBombratio = 0.5;
    gv_aRSnipebase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SnipeDamage2", "Amount", 0);
    gv_aRSniperatio = 0.75;
    gv_aRThrowBanelingdirectbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ThrowBanelingDamage", "Amount", 0);
    gv_aRThrowBanelingdirectratio = 1.0;
    gv_aRThrowBanelingDoTbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ThrowBanelingDoTDamage", "Amount", 0);
    gv_aRThrowBanelingDoTratio = (0.75 / (1.0 / 0.25) / CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "AcidSpray", "Duration", 0));
    gv_aRBileBlastdirectbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "BileBlastDamage", "Amount", 0);
    gv_aRBileBlastdirectratio = 0.8;
    gv_aRBileBlastzerglingattackbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SummonedZerglingClawsDamage", "Amount", 0);
    gv_aRBileBlastzerglingattackratio = 0.1;
    gv_aRCorruptreflectbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "CorruptMissileDamage", "Amount", 0);
    gv_aRCorruptreflectratio = 1.3;
    gv_aRNydusWormdirectbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "NydusWormDamage", "Amount", 0);
    gv_aRNydusWormdirectratio = 1.75;
    gv_aRNydusWormroachattackbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "BileBlastRoachNeedleSpines", "Amount", 0);
    gv_aRNydusWormroachattackratio = 0.2;
    gv_aRLightAspecthealbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "LightAspectHealAlly", "VitalArray[" + IntToString(0) + "].Change", 0);
    gv_aRLightAspecthealratio = 1.0;
    gv_aRTorpedobase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "TorpedoDamage", "Amount", 0);
    gv_aRTorpedoratio = 1.0;
    gv_aRDarkAspectbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "DarkAspectDamage", "Amount", 0);
    gv_aRDarkAspectratio = 1.2;
    gv_aRGravityWellbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "GravityWellDamage", "Amount", 0);
    gv_aRGravityWellratio = (1.0 / (1.0 / 0.25) / (CatalogFieldValueGetAsInt(c_gameCatalogEffect, "GravityWellPersistentDamageEnergy", "PeriodCount", c_playerAny) * 0.25));
    gv_aRSeekerBeambase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SeekerBeamDamage", "Amount", 0);
    gv_aRSeekerBeamratio = 0.7;
    gv_aRPurgedirectbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "PurgeBaseDamage", "Amount", 0);
    gv_aRPurgedirectratio = 0.75;
    gv_aRPurgebonusbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "PurgeBonusDamage", "Amount", 0);
    gv_aRPurgebonusratio = 0.15;
    gv_aRLongshockdamagebase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "LongshockDamage", "Amount", 0);
    gv_aRLongshockdamageratio = 0.5;
    gv_aRElectricRazorbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ElectricRazorDamageOutbound", "Amount", 0);
    gv_aRElectricRazorratio = 1.0;
    gv_playersnominimap = PlayerGroupEmpty();
    gv_playerswithminimap = PlayerGroupAll();
    gv_aRSnapperbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SnapperDamage", "Amount", 0);
    gv_aRSnapperratio = 0.75;
    gv_aRRocketSentrybase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "RocketSentryImpactDamage", "Amount", 0);
    gv_aRRocketSentryratio = 0.6;
    gv_aRFirefistGroundbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "FirefistGroundDamage", "Amount", 0);
    gv_aRFirefistGroundratio = 0.35;
    gv_aRFirefistAirbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "FirefistFlyingDamage", "Amount", 0);
    gv_aRFirefistAirratio = 1.2;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_screamerrange[init_i] = 7.0;
    }
    gv_screamerrangebonus = 0.35;
    gv_screamerstartingrange = 9.0;
    gv_aRPsionicStorminitialbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "PsionicStormInitialDamageInitial", "Amount", 0);
    gv_aRPsionicStorminitialratio = 1.0;
    gv_aRPsionicStormDoTbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "PsionicStormDamage", "Amount", 0);
    gv_aRPsionicStormDoTratio = (1.0 / CatalogFieldValueGetAsInt(c_gameCatalogEffect, "PsionicStormInitialPersistent", "PeriodCount", 0));
    gv_aRRepeaterLancebase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "RepeaterLanceDamageOutbound", "Amount", 0);
    gv_aRRepeaterLanceratio = 1.0;
    gv_aRWildfireimpactbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "WildfireDamage", "Amount", 0);
    gv_aRWildfireimpactratio = 1.0;
    gv_aRWildfirebonusbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "WildfireBonusDamage", "Amount", 0);
    gv_aRWildfirebonusratio = 1.0;
    gv_aRForceFieldbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ForceFieldInitialDamage", "Amount", 0);
    gv_aRForceFieldratio = 0.2;
    gv_aRBlueFlamebase = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "BlueFlame", "Modification.DamageDealtScaled[" + IntToString(1) + "]", 0);
    gv_aRBlueFlameratio = 0.6;
    gv_aRTurbobase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "TurboFireDamage", "Amount", 0);
    gv_aRTurboratio = (1.0 / CatalogFieldValueGetAsInt(c_gameCatalogEffect, "TurboFireCreatePersistent", "PeriodCount", 0));
    gv_aRNapalmSpraybase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "RacerMeleeSprayDamage", "Amount", 0);
    gv_aRNapalmSprayratio = 0.3;
    gv_aROilPuddlefirebase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "OilPuddleIgnitedUnitDamage", "Amount", 0);
    gv_aROilPuddlefireratio = (1.0 / (1.0 / 0.25) / CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "OilIgnited", "Duration", 0));
    gv_aRTwingalebase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "TradeWindsDamage", "Amount", 0);
    gv_aRTwingaleratio = 1.0;
    gv_aRGlacialTrailimpactbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "GlacialTrailImpactDamage", "Amount", 0);
    gv_aRGlacialTrailimpactratio = 1.25;
    gv_aRGlacialTrailDoTbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "GlacialTrailDamage", "Amount", 0);
    gv_aRGlacialTrailDoTratio = (1.5 / (1.0 / 0.1) / (CatalogFieldValueGetAsInt(c_gameCatalogAbil, "GlacialTrail", "Range[" + IntToString(0) + "]", c_playerAny) / CatalogFieldValueGetAsInt(c_gameCatalogMover, "GlacialTrailWeapon", "MotionPhases[" + IntToString(0) + "].MaxSpeed", c_playerAny)));
    gv_aRFrostbiteattackbase = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "FrostbiteAttack", "Modification.DamageDealtScaled[" + IntToString(1) + "]", 0);
    gv_aRFrostbiteattackratio = 0.75;
    gv_aRIcebreakerbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "IcebreakerDamage", "Amount", 0);
    gv_aRIcebreakerratio = 1.25;
    gv_aRThatawayattackbase = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "CalledShotAttackBehavior", "Modification.DamageDealtScaled[" + IntToString(1) + "]", 0);
    gv_aRThatawayattackratio = 0.5;
    gv_aRLungebase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "LungeDamage", "Amount", 0);
    gv_aRLungeratio = 0.75;
    gv_aRGraviticStompbase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "GraviticStompSpellDamage", "Amount", 0);
    gv_aRGraviticStompratio = 0.6;
    gv_aRMaimattackbase = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "Maim", "Modification.DamageDealtScaled[" + IntToString(1) + "]", 0);
    gv_aRMaimattackratio = 0.75;
    gv_aRRadarMinebase = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "RadarMineDamage", "Amount", 0);
    gv_aRRadarMineratio = 0.9;
    gv_maximumRadarMines = 3;
    gv_siegeMinionWaveCurrent = 1;
    gv_siegeMinionInterval = 3;
    gv_minionSpawnInterval = 30.0;
    gv_minionSpawnTimer = TimerCreate();
    gv_jungleRespawnTime = 60;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_jungleCamps[init_i][init_j] = UnitGroupEmpty();
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_jungleTimers[init_i][init_j] = TimerCreate();
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_jungleTimerTextBoxes[init_i][init_j] = c_textTagNone;
        }
    }
    gv_jungleInitialDelay = 40;
    gv_monsterUpgradeInterval = 60.0;
    gv_monsterUpgradeTimer = TimerCreate();
    gv_pointsSearchRadius = 15.0;
    gv_pointValueBase = 100;
    gv_casterModifier = -10;
    gv_siegeModifier = 20;
    gv_aIKillMultiplier = 0.5;
    gv_heroKillPointValueBase = 1000;
    gv_captureTextTag = c_textTagNone;
    gv_watchtowercaptureconstant = 2.5;
    gv_respawntimer = 10.0;
    gv_deadplayers = PlayerGroupEmpty();
    gv_platformHealingCoefficient = 0.008;
    gv_minionUpgradeInterval = 180.0;
    gv_minionUpgradeTimer = TimerCreate();
    gv_rSPNBox = c_invalidDialogId;
    gv_rSPNTimerNumberLabel = c_invalidDialogControlId;
    gv_rSPNTextLabel = c_invalidDialogControlId;
    gv_rSPNBoxWidth = 200;
    gv_rSPNBoxHeight = 200;
    gv_rSPNXOffset = 200;
    gv_rSPNYOffset = 200;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_rSPNTimers[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_tMPTPointsBoxes[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_tMPTPointBoxBGs[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_tMPTPointBoxLabels[init_i] = c_invalidDialogControlId;
    }
    gv_tMPTMidBox = c_invalidDialogId;
    gv_tMPTTeamBoxWidth = 200;
    gv_tMPTTeamBoxHeight = 80;
    gv_tMPTTeamBoxXOffsetLeft = -100;
    gv_tMPTTeamBoxXOffsetRight = (gv_tMPTTeamBoxXOffsetLeft * -1);
    gv_tMPTTeamBoxYOffset = -460;
    gv_tMPTPointsLabelWidth = 150;
    gv_tMPTPointsLabelHeight = 75;
    gv_tMPTPointsLabelYOffset = -10;
    gv_tMPTPointsLabelStyle = "ModCenterSize20Bold";
    gv_tMPTMidBoxWidth = 275;
    gv_tMPTMidBoxHeight = 90;
    gv_tMPTMidBoxYOffset = -515;
    gv_tMPTMidLabelWidth = 190;
    gv_tMPTMidLabelHeight = 85;
    gv_tMPTMidLabelYOffset = -10;
    gv_tMPTMidLabelStyle = "ModCenterSize20Bold";
    gv_championSelect = c_invalidDialogId;
    gv_cHSLHeaderLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_playerBoxes[init_i][init_j] = c_invalidDialogId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_playerBoxLabels[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_playerBoxBackgrounds[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_playerPortraitImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_playerPortraitCheckmark[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_playerNames[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_heroButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_heroIcons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_heroAbilityButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_heroAbilityButtonIcons[init_i] = c_invalidDialogControlId;
    }
    gv_timerDialog = c_invalidDialogId;
    gv_timerLabel = c_invalidDialogControlId;
    gv_lockinButton = c_invalidDialogControlId;
    gv_heroModelDialog = c_invalidDialogId;
    gv_heroModelItem = c_invalidDialogControlId;
    gv_cHSLPlayerBoxHalf = (gv_cCHSLPlayerBoxSize / 2);
    gv_cCHSLPlayerLabelExtraWidthHalf = (gv_cCHSLPlayerLabelExtraWidth / 2);
    gv_cHSLPlayerLabelWidth = (gv_cCHSLPlayerBoxSize + gv_cCHSLPlayerLabelExtraWidth);
    gv_cHSLPlayerLabelHeight = 30;
    gv_cHSLPlayerPortraitInlayx = ((gv_cCHSLPlayerBoxSize / 2) - (gv_cCHSLPlayerPortraitWidth / 2));
    gv_cHSLPlayerPortraitInlayy = ((gv_cCHSLPlayerBoxSize / 2) - (gv_cCHSLPlayerPortraitHeight / 2));
    gv_cHSLPlayerCheckmarkInlayx = ((gv_cCHSLPlayerBoxSize / 2) - (gv_cCHSLPlayerCheckmarkWidth / 2));
    gv_cHSLPlayerCheckmarkInlayy = ((gv_cCHSLPlayerBoxSize / 2) - (gv_cCHSLPlayerCheckmarkHeight / 2));
    gv_cCHSLTimerDuration = 90.0;
    gv_cCHSLTimerShortDuration = 11.0;
    gv_cCHSLTimer = TimerCreate();
    gv_cCHSLTimerBeepstart = 10;
    gv_cCHSLTimerBoxWidthOffset = 50;
    gv_cCHSLTimerBoxHeight = 140;
    gv_cCHSLTimerLabelWidth = 160;
    gv_cCHSLTimerLabelHeight = 100;
    gv_cHSLTimerLabelHeightOffset = -12;
    gv_cHSLnHeroButtons = 1;
    gv_cCHSLHeroButtonnCols = 6;
    gv_cHSLHeroButtonnRows = 2;
    gv_cHSLHeroButtonIconInlay = ((gv_cCHSLHeroButtonSize / 2) - (gv_cCHSLHeroButtonIconSize / 2));
    gv_cHSLAbilityButtonnCols = 5;
    gv_cHSLAbilityButtonnRows = 1;
    gv_cHSLAbilityButtonIconInlay = ((gv_cCHSLAbilityButtonSize / 2) - (gv_cCHSLAbilityButtonIconSize / 2));
    gv_cCHSLLockinButtonWidth = (gv_cCHSLAbilityButtonSize + gv_cCHSLAbilityButtonSize + gv_cCHSLAbilityButtonExtra);
    gv_cCHSLLockinButtonHeight = 100;
    gv_cCHSLLockinButtonGap = 6;
    gv_cCHSLHeroModelDialogWidth = (gv_cCHSLAbilityButtonSize + gv_cCHSLAbilityButtonSize + gv_cCHSLAbilityButtonSize + gv_cCHSLAbilityButtonExtra + gv_cCHSLAbilityButtonExtra);
    gv_cCHSLHeroModelDialogGap = 52;
    gv_cHSLHeroModelDialogHeight = ((gv_cCHSLHeaderHeight + gv_cCHSLHeaderGap + (gv_cCHSLPlayerBoxSize * gv_cCHSLPlayerBoxnRows) + (gv_cHSLPlayerLabelHeight * gv_cCHSLPlayerBoxnRows) + gv_cCHSLHEIGHTBottomMargin) - (gv_cCHSLHeaderHeight + gv_cCHSLHeaderGap + (gv_cCHSLHeroButtonSize * gv_cHSLHeroButtonnRows) + gv_cCHSLHeroModelDialogGap + gv_cCHSLHeroModelDialogGap + gv_cCHSLAbilityButtonSize + gv_cCHSLHEIGHTBottomMargin + gv_cCHSLHeroModelDialogExtraHeight));
    gv_cCHSLHeroModelDialogExtraHeight = 120;
    gv_cHSLHeroModelWidth = (gv_cCHSLHeroModelDialogWidth * 2);
    gv_cHSLHeroModelHeight = (gv_cHSLHeroModelDialogHeight * 2);
    gv_cCHSLHeroModelBottomMargin = 20;
    gv_cCHSLMiddleGapWidth = ((gv_cCHSLHeroButtonSize * gv_cCHSLHeroButtonnCols) + (gv_cCHSLHeroButtonExtra * (gv_cCHSLHeroButtonnCols - 1)) + (gv_cCHSLPlayerBoxExtra * 2));
    gv_nRows = FixedToInt(Ceiling((gv_cHSLnHeroButtons / gv_cCHSLHeroButtonnCols)));
    gv_cCHSLHEIGHTBottomMargin = 80;
    gv_cCHSLWIDTHHorizontalMargin = 60;
    gv_cCHSLWIDTHPlayerBoxHorizontalGap = 40;
    gv_cHSLWIDTHHeroButtons = ((gv_cCHSLHeroButtonnCols * gv_cCHSLHeroButtonSize) + (gv_cCHSLHeroButtonExtra * (gv_cCHSLHeroButtonnCols - 1)));
    gv_cCHSLWIDTHNewColPadding = 5;
    gv_cCHSLHeaderLabelHeight = gv_cCHSLHeaderHeight;
    gv_cCHSLHeaderLabelWidth = gv_cCHSLMiddleGapWidth;
    gv_abilityButtonTicker = 1;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_heroButtonRecords[init_i].lv_previewCamera = "Star2CameraLow05";
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_UpdateAnaniasAPvalues (int lp_player);
void gf_UpdateBenguraAPvalues (int lp_player);
void gf_UpdateBrookeAPvalues (int lp_player);
void gf_UpdateDamaskAPvalues (int lp_player);
void gf_UpdateFenixAPvalues (int lp_player);
void gf_UpdateHerodAPvalues (int lp_player);
void gf_UpdateJordanAPvalues (int lp_player);
void gf_UpdateMelchiorAPvalues (int lp_player);
void gf_UpdateNilesAPvalues (int lp_player);
void gf_UpdateKaineAPvalues (int lp_player);
void gf_UpdateTheTorrasqueAPvalues (int lp_player);
void gf_UpdateSilasAPvalues (int lp_player);
void gf_UpdateallAPvalues (int lp_player);
unitgroup gf_SpawnJungleCamp (int lp_side, int lp_monster);
void gf_CheckJungleCamp (int lp_side, int lp_monster, point lp_dyingmonsterpoint);
void gf_CreateJungleTextTag (playergroup lp_players, int lp_side, int lp_monster);
void gf_MaintainJungleTextTag (int lp_texttag, timer lp_timer);
int gf_GetPointValue (unit lp_dyingunit, unit lp_killingunit, int lp_killerowner);
void gf_CreatePointsTextTag (point lp_location, int lp_killerowner, int lp_amountofpoints, unit lp_dyingunit);
void gf_PointsTextTagLife (int lp_texttag);
void gf_RespawnBoxCreate ();
void gf_TeamPointsDialogsCreate ();
string gf_ConvertIntegerToStringWithCommas (int lp_number);
int gf_PlayerNumbertoPlayerTeam (int lp_player);
int gf_PlayerNumbertoPlayerTeamIndex (int lp_player);
int gf_PlayerTeamIndextoPlayerNumber (int lp_team, int lp_index);
void gf_CreateAbilityButton (string lp_image, text lp_tooltipText, text lp_abilityName, int lp_heroID);
void gf_InitializeAbilityButtons (string lp_heroUnitType);
void gf_CreateHeroButton (string lp_unitType, string lp_icon, text lp_tooltip, string lp_previewUnitType, string lp_previewCamera);
void gf_InitializeHeroButtons ();
int gf_DialogItemtoHeroButtonID (int lp_dialogItemUsed);
void gf_BeginCHSLTimer ();
void gf_ChampionSelectDialogCreate ();
void gf_HideSCUI ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_InitializeHumanPlayersGroup;
trigger gt_InitializeSpawnPoints;
trigger gt_effecttargetdebugging;
trigger gt_debugoptions;
trigger gt_debugvideomode;
trigger gt_debugabilitycooldowns;
trigger gt_PylonLimit;
trigger gt_resetbomb;
trigger gt_resetsnipe;
trigger gt_resetdart;
trigger gt_Summonroaches;
trigger gt_jammerminimapdisable;
trigger gt_jammerminimapreenable;
trigger gt_jammerreenableperiodiccheck;
trigger gt_longshockcooldownfix;
trigger gt_purge;
trigger gt_burrowcooldown;
trigger gt_limitto1;
trigger gt_takeoffvisionheight;
trigger gt_takeoffvisionheightoff;
trigger gt_screamerrangedefault;
trigger gt_screamerrangeincrease;
trigger gt_screamerrangedecrease;
trigger gt_RepeaterLanceCooldownReset;
trigger gt_WildPowerChanges;
trigger gt_WildfireDistanceCalc;
trigger gt_WildfireLaunch;
trigger gt_WildfireImpact;
trigger gt_MomentumPreserver;
trigger gt_AgainResets;
trigger gt_DisguiseDeselect;
trigger gt_DisguiseReselect;
trigger gt_DisguiseRecolorMinionBars;
trigger gt_TurretBehaviorFix;
trigger gt_EnforceMineCounts;
trigger gt_SpyCloakCooldownFix;
trigger gt_CloakChargeCost;
trigger gt_BasicForwarding;
trigger gt_minionspawnpointassignments;
trigger gt_minionwaves;
trigger gt_InitialJungleSpawn;
trigger gt_JungleDeathResponse;
trigger gt_JungleLeash;
trigger gt_MonsterUpgrades;
trigger gt_PointDeathResponse;
trigger gt_HeroDeathResponse;
trigger gt_HeroKillTag;
trigger gt_UpdatePowerPoints;
trigger gt_revealerinit;
trigger gt_captureperiodic;
trigger gt_revealerperiodic;
trigger gt_WestTopOuterInner;
trigger gt_WestTopInnerInhibT;
trigger gt_WestTopInhibTInhib;
trigger gt_WestBotOuterInner;
trigger gt_WestBotInnerInhibT;
trigger gt_WestBotInhibTInhib;
trigger gt_WestInhibsNexusT;
trigger gt_WestNexusTNexus;
trigger gt_EastTopOuterInner;
trigger gt_EastTopInnerInhibT;
trigger gt_EastTopInhibTInhib;
trigger gt_EastBotOuterInner;
trigger gt_EastBotInnerInhibT;
trigger gt_EastBotInhibTInhib;
trigger gt_EastInhibsNexusT;
trigger gt_EastNexusTNexus;
trigger gt_WestNexusdies;
trigger gt_EastNexusdies;
trigger gt_IncrementRespawnTimer;
trigger gt_DeathResponseIngame;
trigger gt_DeathResponseUI;
trigger gt_UpdateBoxText;
trigger gt_RespawnResponse;
trigger gt_PlatformHealing;
trigger gt_InitialBuildingInvulnerability;
trigger gt_WestTurretBehavior;
trigger gt_EastTurretBehavior;
trigger gt_TurretDeath;
trigger gt_MinionUpgrades;
trigger gt_Recall;
trigger gt_TeamPointsUpdateText;
trigger gt_HeroButtonResponse;
trigger gt_LockinButtonResponse;
trigger gt_UpdateCHSLTimer;
trigger gt_TimerBeeps;
trigger gt_GameInitialization;
trigger gt_ChampSelectEnding;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_UpdateAnaniasAPvalues (int lp_player) {
    // Variable Declarations
    fixed lv_launchpylon;
    fixed lv_pylonovercharge;
    fixed lv_personalwarp;
    fixed lv_cleave;

    // Variable Initialization
    lv_launchpylon = (gv_aRLaunchPylonbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRLaunchPylonratio));
    lv_pylonovercharge = (gv_aRPylonOverchargeattackbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRPersonalWarpattackratio));
    lv_personalwarp = (gv_aRPersonalWarpattackbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRPersonalWarpattackratio));
    lv_cleave = (gv_aRCleavebase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRCleaveratio));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "PylonDamage", "Amount", lp_player, FixedToString(lv_launchpylon, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "PylonBasicAttackDamage", "Amount", lp_player, FixedToString(lv_pylonovercharge, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "PersonalWarpAttack", "Modification.DamageDealtScaled[" + IntToString(1) + "]", lp_player, FixedToString(lv_personalwarp, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "CleaveSpellDamage", "Amount", lp_player, FixedToString(lv_cleave, c_fixedPrecisionAny));
}

void gf_UpdateBenguraAPvalues (int lp_player) {
    // Variable Declarations
    fixed lv_fluxclaws;
    fixed lv_nutritivevomitdamage;
    fixed lv_nutritivevomitheal;
    fixed lv_hookedtongue;
    fixed lv_pounce;

    // Variable Initialization
    lv_fluxclaws = (gv_aRFluxclawsattackbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRFluxclawsattackratio));
    lv_nutritivevomitdamage = (gv_aRNutritiveVomitdirectbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRNutritiveVomitdirectratio));
    lv_nutritivevomitheal = (gv_aRNutritiveVomithealbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRNutritiveVomithealratio));
    lv_hookedtongue = (gv_aRHookedTonguebase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRHookedTongueratio));
    lv_pounce = (gv_aRPouncebase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRPounceratio));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, "Fluxclaws", "Modification.DamageDealtScaled[" + IntToString(1) + "]", lp_player, FixedToString(lv_fluxclaws, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "VileBurstDamage", "Amount", lp_player, FixedToString(lv_nutritivevomitdamage, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "VileBurstHeal", "VitalArray[" + IntToString(0) + "].Change", lp_player, FixedToString(lv_nutritivevomitheal, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "HookedTonguesDamage", "Amount", lp_player, FixedToString(lv_hookedtongue, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "PounceImpactDamage", "Amount", lp_player, FixedToString(lv_pounce, c_fixedPrecisionAny));
}

void gf_UpdateBrookeAPvalues (int lp_player) {
    // Variable Declarations
    fixed lv_bomb;
    fixed lv_snipe;

    // Variable Initialization
    lv_bomb = (gv_aRBombbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRBombratio));
    lv_snipe = (gv_aRSnipebase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRSniperatio));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "BombDamage", "Amount", lp_player, FixedToString(lv_bomb, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "SnipeDamage2", "Amount", lp_player, FixedToString(lv_snipe, c_fixedPrecisionAny));
}

void gf_UpdateDamaskAPvalues (int lp_player) {
    // Variable Declarations
    fixed lv_throwbanelingdirect;
    fixed lv_throwbanelingdot;
    fixed lv_bileblastdirect;
    fixed lv_bileblastzerglingattack;
    fixed lv_corruptreflect;
    fixed lv_nyduswormdirect;
    fixed lv_nyduswormroachattack;

    // Variable Initialization
    lv_throwbanelingdirect = (gv_aRThrowBanelingdirectbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRThrowBanelingdirectratio));
    lv_throwbanelingdot = (gv_aRThrowBanelingDoTbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRThrowBanelingDoTratio));
    lv_bileblastdirect = (gv_aRBileBlastdirectbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRBileBlastdirectratio));
    lv_bileblastzerglingattack = (gv_aRBileBlastzerglingattackbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRBileBlastzerglingattackratio));
    lv_corruptreflect = (gv_aRCorruptreflectbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRCorruptreflectratio));
    lv_nyduswormdirect = (gv_aRNydusWormdirectbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRNydusWormdirectratio));
    lv_nyduswormroachattack = (gv_aRNydusWormroachattackbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRNydusWormroachattackratio));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "ThrowBanelingDamage", "Amount", lp_player, FixedToString(lv_throwbanelingdirect, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "ThrowBanelingDoTDamage", "Amount", lp_player, FixedToString(lv_throwbanelingdot, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "BileBlastDamage", "Amount", lp_player, FixedToString(lv_bileblastdirect, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "SummonedZerglingClawsDamage", "Amount", lp_player, FixedToString(lv_bileblastzerglingattack, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "CorruptMissileDamage", "Amount", lp_player, FixedToString(lv_corruptreflect, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "NydusWormDamage", "Amount", lp_player, FixedToString(lv_nyduswormdirect, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "BileBlastRoachNeedleSpines", "Amount", lp_player, FixedToString(lv_nyduswormroachattack, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "BileBlastRoachNeedleSpinesMelee", "Amount", lp_player, FixedToString(lv_nyduswormroachattack, c_fixedPrecisionAny));
}

void gf_UpdateFenixAPvalues (int lp_player) {
    // Variable Declarations
    fixed lv_lightaspectheal;
    fixed lv_torpedo;
    fixed lv_darkaspect;
    fixed lv_gravitywell;
    fixed lv_seekerbeam;

    // Variable Initialization
    lv_lightaspectheal = (gv_aRLightAspecthealbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRLightAspecthealratio));
    lv_torpedo = (gv_aRTorpedobase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRTorpedoratio));
    lv_darkaspect = (gv_aRDarkAspectbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRDarkAspectratio));
    lv_gravitywell = (gv_aRGravityWellbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRGravityWellratio));
    lv_seekerbeam = (gv_aRSeekerBeambase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRSeekerBeamratio));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "LightAspectHealAlly", "VitalArray[" + IntToString(0) + "].Change", lp_player, FixedToString(lv_lightaspectheal, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "LightAspectHealSelf", "VitalArray[" + IntToString(0) + "].Change", lp_player, FixedToString(lv_lightaspectheal, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "TorpedoDamage", "Amount", lp_player, FixedToString(lv_torpedo, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "DarkAspectDamage", "Amount", lp_player, FixedToString(lv_darkaspect, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "GravityWellDamage", "Amount", lp_player, FixedToString(lv_gravitywell, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "SeekerBeamDamage", "Amount", lp_player, FixedToString(lv_seekerbeam, c_fixedPrecisionAny));
}

void gf_UpdateHerodAPvalues (int lp_player) {
    // Variable Declarations
    fixed lv_purgedirect;
    fixed lv_purgebonus;
    fixed lv_longshock;
    fixed lv_electricrazor;

    // Variable Initialization
    lv_purgedirect = (gv_aRPurgedirectbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRPurgedirectratio));
    lv_purgebonus = (gv_aRPurgebonusbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRPurgebonusratio));
    lv_longshock = (gv_aRLongshockdamagebase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRLongshockdamageratio));
    lv_electricrazor = (gv_aRElectricRazorbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRElectricRazorratio));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "PurgeBaseDamage", "Amount", lp_player, FixedToString(lv_purgedirect, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "PurgeBonusDamage", "Amount", lp_player, FixedToString(lv_purgebonus, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "LongshockDamage", "Amount", lp_player, FixedToString(lv_longshock, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "ElectricRazorDamageOutbound", "Amount", lp_player, FixedToString(lv_electricrazor, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "ElectricRazorDamageInbound", "Amount", lp_player, FixedToString(lv_electricrazor, c_fixedPrecisionAny));
}

void gf_UpdateJordanAPvalues (int lp_player) {
    // Variable Declarations
    fixed lv_snapper;
    fixed lv_rocketsentry;
    fixed lv_firefistground;
    fixed lv_firefistair;

    // Variable Initialization
    lv_snapper = (gv_aRSnapperbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRSnapperratio));
    lv_rocketsentry = (gv_aRRocketSentrybase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRSnapperratio));
    lv_firefistground = (gv_aRFirefistGroundbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRFirefistGroundratio));
    lv_firefistair = (gv_aRFirefistAirbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRFirefistAirratio));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "SnapperDamage", "Amount", lp_player, FixedToString(lv_snapper, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "SnapperDamage2", "Amount", lp_player, FixedToString(lv_snapper, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "RocketSentryImpactDamage", "Amount", lp_player, FixedToString(lv_rocketsentry, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "FirefistGroundDamage", "Amount", lp_player, FixedToString(lv_firefistground, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "FirefistFlyingDamage", "Amount", lp_player, FixedToString(lv_firefistair, c_fixedPrecisionAny));
}

void gf_UpdateMelchiorAPvalues (int lp_player) {
    // Variable Declarations
    fixed lv_psionicstorminitial;
    fixed lv_psionicstormdot;
    fixed lv_repeaterlance;
    fixed lv_wildfireinitial;
    fixed lv_wildfirebonus;
    fixed lv_forcefield;

    // Variable Initialization
    lv_psionicstorminitial = (gv_aRPsionicStorminitialbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRPsionicStorminitialratio));
    lv_psionicstormdot = (gv_aRPsionicStormDoTbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRPsionicStormDoTratio));
    lv_repeaterlance = (gv_aRRepeaterLancebase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRRepeaterLanceratio));
    lv_wildfireinitial = (gv_aRWildfireimpactbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRWildfireimpactratio));
    lv_wildfirebonus = (gv_aRWildfirebonusbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRWildfirebonusratio));
    lv_forcefield = (gv_aRForceFieldbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRForceFieldratio));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "PsionicStormInitialDamageInitial", "Amount", lp_player, FixedToString(lv_psionicstorminitial, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "PsionicStormDamage", "Amount", lp_player, FixedToString(lv_psionicstormdot, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "RepeaterLanceDamageOutbound", "Amount", lp_player, FixedToString(lv_repeaterlance, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "RepeaterLanceDamageInbound", "Amount", lp_player, FixedToString(lv_repeaterlance, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "WildfireDamage", "Amount", lp_player, FixedToString(lv_wildfireinitial, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "WildfireBonusDamage", "Amount", lp_player, FixedToString(lv_wildfirebonus, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "ForceFieldInitialDamage", "Amount", lp_player, FixedToString(lv_forcefield, c_fixedPrecisionAny));
}

void gf_UpdateNilesAPvalues (int lp_player) {
    // Variable Declarations
    fixed lv_blueflame;
    fixed lv_turbo;
    fixed lv_napalmspray;
    fixed lv_oilpuddle;

    // Variable Initialization
    lv_blueflame = (gv_aRBlueFlamebase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRBlueFlameratio));
    lv_turbo = (gv_aRTurbobase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRTurboratio));
    lv_napalmspray = (gv_aRNapalmSpraybase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRNapalmSprayratio));
    lv_oilpuddle = (gv_aROilPuddlefirebase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aROilPuddlefireratio));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, "BlueFlame", "Modification.DamageDealtScaled[" + IntToString(1) + "]", lp_player, FixedToString(lv_blueflame, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "BlueFlame", "Modification.DamageDealtScaled[" + IntToString(2) + "]", lp_player, FixedToString(lv_blueflame, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "TurboFireDamage", "Amount", lp_player, FixedToString(lv_turbo, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "RacerMeleeSprayDamage", "Amount", lp_player, FixedToString(lv_napalmspray, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "OilPuddleIgnitedUnitDamage", "Amount", lp_player, FixedToString(lv_oilpuddle, c_fixedPrecisionAny));
}

void gf_UpdateKaineAPvalues (int lp_player) {
    // Variable Declarations
    fixed lv_twingale;
    fixed lv_glacialtrailimpact;
    fixed lv_glacialtraildot;
    fixed lv_frostbite;
    fixed lv_icebreaker;

    // Variable Initialization
    lv_twingale = (gv_aRTwingalebase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRTwingaleratio));
    lv_glacialtrailimpact = (gv_aRGlacialTrailimpactbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRGlacialTrailimpactratio));
    lv_glacialtraildot = (gv_aRGlacialTrailDoTbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRGlacialTrailDoTratio));
    lv_frostbite = (gv_aRFrostbiteattackbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRFrostbiteattackratio));
    lv_icebreaker = (gv_aRIcebreakerbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRIcebreakerratio));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "TradeWindsDamage", "Amount", lp_player, FixedToString(lv_twingale, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "GlacialTrailImpactDamage", "Amount", lp_player, FixedToString(lv_glacialtrailimpact, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "GlacialTrailDamage", "Amount", lp_player, FixedToString(lv_glacialtraildot, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "FrostbiteAttack", "Modification.DamageDealtScaled[" + IntToString(1) + "]", lp_player, FixedToString(lv_frostbite, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "FrostbiteAttack", "Modification.DamageDealtScaled[" + IntToString(2) + "]", lp_player, FixedToString(lv_frostbite, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "IcebreakerDamage", "Amount", lp_player, FixedToString(lv_icebreaker, c_fixedPrecisionAny));
}

void gf_UpdateTheTorrasqueAPvalues (int lp_player) {
    // Variable Declarations
    fixed lv_lunge;
    fixed lv_graviticstomp;
    fixed lv_thataway;

    // Variable Initialization
    lv_lunge = (gv_aRLungebase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRLungeratio));
    lv_graviticstomp = (gv_aRGraviticStompbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRGraviticStompratio));
    lv_thataway = (gv_aRThatawayattackbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRThatawayattackratio));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "LungeDamage", "Amount", lp_player, FixedToString(lv_lunge, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "GraviticStompSpellDamage", "Amount", lp_player, FixedToString(lv_graviticstomp, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "CalledShotAttackBehavior", "Modification.DamageDealtScaled[" + IntToString(1) + "]", lp_player, FixedToString(lv_thataway, c_fixedPrecisionAny));
}

void gf_UpdateSilasAPvalues (int lp_player) {
    // Variable Declarations
    fixed lv_maim;
    fixed lv_radarmine;

    // Variable Initialization
    lv_maim = (gv_aRMaimattackbase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRMaimattackratio));
    lv_radarmine = (gv_aRRadarMinebase + (UnitBehaviorCount(gv_playerChampions[lp_player], "AddPowerPoints") * gv_aRRadarMineratio));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, "Maim", "Modification.DamageDealtScaled[" + IntToString(1) + "]", lp_player, FixedToString(lv_maim, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "RadarMineDamage", "Amount", lp_player, FixedToString(lv_radarmine, c_fixedPrecisionAny));
}

void gf_UpdateallAPvalues (int lp_player) {
    // Implementation
    gf_UpdateAnaniasAPvalues(lp_player);
    gf_UpdateBenguraAPvalues(lp_player);
    gf_UpdateBrookeAPvalues(lp_player);
    gf_UpdateDamaskAPvalues(lp_player);
    gf_UpdateFenixAPvalues(lp_player);
    gf_UpdateHerodAPvalues(lp_player);
    gf_UpdateJordanAPvalues(lp_player);
    gf_UpdateMelchiorAPvalues(lp_player);
    gf_UpdateNilesAPvalues(lp_player);
    gf_UpdateKaineAPvalues(lp_player);
    gf_UpdateTheTorrasqueAPvalues(lp_player);
    gf_UpdateSilasAPvalues(lp_player);
}

unitgroup gf_SpawnJungleCamp (int lp_side, int lp_monster) {
    int autoCB68BAA9_val;
    int autoE3DC5EB6_val;
    int auto97A3B0BD_val;

    // Variable Declarations
    unitgroup lv_spawnedunits;

    // Variable Initialization
    lv_spawnedunits = UnitGroupEmpty();

    // Implementation
    autoCB68BAA9_val = lp_side;
    if (autoCB68BAA9_val == 1) {
        autoE3DC5EB6_val = lp_monster;
        if (autoE3DC5EB6_val == 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Quillgor", c_unitCreateIgnorePlacement, 15, PointFromId(181), PointFromId(275));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
            libNtve_gf_UnitCreateFacingPoint(1, "Quillgor", c_unitCreateIgnorePlacement, 15, PointFromId(185), PointFromId(275));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
            libNtve_gf_UnitCreateFacingPoint(1, "DireQuillgor", c_unitCreateIgnorePlacement, 15, PointFromId(179), PointFromId(275));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
        }
        else if (autoE3DC5EB6_val == 2) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mitoscarab", c_unitCreateIgnorePlacement, 15, PointFromId(202), PointFromId(277));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
            libNtve_gf_UnitCreateFacingPoint(1, "Mitoscarab", c_unitCreateIgnorePlacement, 15, PointFromId(273), PointFromId(277));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
            libNtve_gf_UnitCreateFacingPoint(1, "DireMitoscarab", c_unitCreateIgnorePlacement, 15, PointFromId(200), PointFromId(277));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
        }
        else if (autoE3DC5EB6_val == 3) {
            libNtve_gf_UnitCreateFacingPoint(1, "Ursadon", c_unitCreateIgnorePlacement, 15, PointFromId(287), PointFromId(130));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
            libNtve_gf_UnitCreateFacingPoint(1, "DireUrsadon", c_unitCreateIgnorePlacement, 15, PointFromId(128), PointFromId(130));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
        }
        else if (autoE3DC5EB6_val == 4) {
            libNtve_gf_UnitCreateFacingPoint(1, "Terrorzor2", c_unitCreateIgnorePlacement, 15, PointFromId(291), PointFromId(293));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/76C2759B"));
        }
    }
    else if (autoCB68BAA9_val == 2) {
        auto97A3B0BD_val = lp_monster;
        if (auto97A3B0BD_val == 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Quillgor", c_unitCreateIgnorePlacement, 15, PointFromId(183), PointFromId(276));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
            libNtve_gf_UnitCreateFacingPoint(1, "Quillgor", c_unitCreateIgnorePlacement, 15, PointFromId(186), PointFromId(276));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
            libNtve_gf_UnitCreateFacingPoint(1, "DireQuillgor", c_unitCreateIgnorePlacement, 15, PointFromId(180), PointFromId(276));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
        }
        else if (auto97A3B0BD_val == 2) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mitoscarab", c_unitCreateIgnorePlacement, 15, PointFromId(203), PointFromId(278));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
            libNtve_gf_UnitCreateFacingPoint(1, "Mitoscarab", c_unitCreateIgnorePlacement, 15, PointFromId(274), PointFromId(278));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
            libNtve_gf_UnitCreateFacingPoint(1, "DireMitoscarab", c_unitCreateIgnorePlacement, 15, PointFromId(201), PointFromId(278));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
        }
        else if (auto97A3B0BD_val == 3) {
            libNtve_gf_UnitCreateFacingPoint(1, "Ursadon", c_unitCreateIgnorePlacement, 15, PointFromId(288), PointFromId(295));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
            libNtve_gf_UnitCreateFacingPoint(1, "DireUrsadon", c_unitCreateIgnorePlacement, 15, PointFromId(133), PointFromId(295));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
        }
        else if (auto97A3B0BD_val == 4) {
            libNtve_gf_UnitCreateFacingPoint(1, "Terrorzor2", c_unitCreateIgnorePlacement, 15, PointFromId(292), PointFromId(294));
            UnitGroupAdd(lv_spawnedunits, UnitLastCreated());
            libHots_gf_StorePointForUnit(UnitLastCreated(), 1, UnitGetPosition(UnitLastCreated()));
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E20417E5"));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E6A5F265"));
    }
    return lv_spawnedunits;
}

void gf_CheckJungleCamp (int lp_side, int lp_monster, point lp_dyingmonsterpoint) {
    int autoA3E2F17F_ae;
    int autoA3E2F17F_ai;

    // Variable Declarations
    int lv_i;
    playergroup lv_texttagplayers;

    // Variable Initialization
    lv_texttagplayers = PlayerGroupEmpty();

    // Implementation
    if ((libNtve_gf_UnitGroupIsDead(gv_jungleCamps[lp_side][lp_monster]) == true)) {
        autoA3E2F17F_ae = 15;
        autoA3E2F17F_ai = 1;
        lv_i = 1;
        for ( ; ( (autoA3E2F17F_ai >= 0 && lv_i <= autoA3E2F17F_ae) || (autoA3E2F17F_ai <= 0 && lv_i >= autoA3E2F17F_ae) ) ; lv_i += autoA3E2F17F_ai ) {
            if ((VisIsVisibleForPlayer(lv_i, lp_dyingmonsterpoint) == true)) {
                PlayerGroupAdd(lv_texttagplayers, lv_i);
            }
            else {
            }
        }
        gf_CreateJungleTextTag(lv_texttagplayers, lp_side, lp_monster);
        Wait(gv_jungleRespawnTime, c_timeGame);
        UnitGroupAddUnitGroup(gv_jungleCamps[lp_side][lp_monster], gf_SpawnJungleCamp(lp_side, lp_monster));
    }
    else {
    }
}

void gf_CreateJungleTextTag (playergroup lp_players, int lp_side, int lp_monster) {
    int autoB20B9966_val;
    int auto35010850_val;
    int autoD23FA78A_val;

    // Variable Declarations
    point lv_texttagposition;

    // Variable Initialization

    // Implementation
    autoB20B9966_val = lp_side;
    if (autoB20B9966_val == 1) {
        auto35010850_val = lp_monster;
        if (auto35010850_val == 1) {
            lv_texttagposition = PointFromId(179);
        }
        else if (auto35010850_val == 2) {
            lv_texttagposition = PointFromId(200);
        }
        else if (auto35010850_val == 3) {
            lv_texttagposition = PointFromId(128);
        }
        else if (auto35010850_val == 4) {
            lv_texttagposition = PointFromId(291);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/20BBC40E"));
        }
    }
    else if (autoB20B9966_val == 2) {
        autoD23FA78A_val = lp_monster;
        if (autoD23FA78A_val == 1) {
            lv_texttagposition = PointFromId(180);
        }
        else if (autoD23FA78A_val == 2) {
            lv_texttagposition = PointFromId(201);
        }
        else if (autoD23FA78A_val == 3) {
            lv_texttagposition = PointFromId(133);
        }
        else if (autoD23FA78A_val == 4) {
            lv_texttagposition = PointFromId(292);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1E87A22C"));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/320532B0"));
    }
    TextTagCreate(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_jungleRespawnTime), 24, lv_texttagposition, 1.0, true, false, lp_players);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 100.00));
    TextTagSetColor(TextTagLastCreated(), c_textTagColorBackground, ColorWithAlpha(0.00, 0.00, 0.00, 80.00));
    TimerStart(gv_jungleTimers[lp_side][lp_monster], gv_jungleRespawnTime, false, c_timeGame);
    gf_MaintainJungleTextTag(TextTagLastCreated(), gv_jungleTimers[lp_side][lp_monster]);
}

trigger auto_gf_MaintainJungleTextTag_Trigger = null;
int auto_gf_MaintainJungleTextTag_lp_texttag;
timer auto_gf_MaintainJungleTextTag_lp_timer;

void gf_MaintainJungleTextTag (int lp_texttag, timer lp_timer) {
    auto_gf_MaintainJungleTextTag_lp_texttag = lp_texttag;
    auto_gf_MaintainJungleTextTag_lp_timer = lp_timer;

    if (auto_gf_MaintainJungleTextTag_Trigger == null) {
        auto_gf_MaintainJungleTextTag_Trigger = TriggerCreate("auto_gf_MaintainJungleTextTag_TriggerFunc");
    }

    TriggerExecute(auto_gf_MaintainJungleTextTag_Trigger, false, false);
}

bool auto_gf_MaintainJungleTextTag_TriggerFunc (bool testConds, bool runActions) {
    int lp_texttag = auto_gf_MaintainJungleTextTag_lp_texttag;
    timer lp_timer = auto_gf_MaintainJungleTextTag_lp_timer;

    // Variable Declarations
    fixed lv_timertick;

    // Variable Initialization

    // Implementation
    lv_timertick = TimerGetRemaining(lp_timer);
    while ((TimerGetRemaining(lp_timer) != 0.0)) {
        while (!((((lv_timertick - TimerGetRemaining(lp_timer)) >= 1) || (TimerGetRemaining(lp_timer) == 0.0)))) {
            Wait(0.25, c_timeGame);
        }
        TextTagSetText(lp_texttag, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))));
        lv_timertick = TimerGetRemaining(lp_timer);
    }
    TextTagDestroy(lp_texttag);
    return true;
}

int gf_GetPointValue (unit lp_dyingunit, unit lp_killingunit, int lp_killerowner) {
    string auto9C693219_val;

    // Variable Declarations
    fixed lv_pointstogive;

    // Variable Initialization

    // Implementation
    if ((UnitFilterMatch(lp_dyingunit, 0, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), 0)) == true)) {
        lv_pointstogive = gv_heroKillPointValueBase;
        return FixedToInt(lv_pointstogive);
    }
    else {
    }
    if ((UnitFilterMatch(lp_dyingunit, 0, UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), 0)) == true)) {
        lv_pointstogive = gv_pointValueBase;
        auto9C693219_val = UnitGetType(lp_dyingunit);
        if (auto9C693219_val == "ZealotMinion") {
            lv_pointstogive += gv_meleeModifier;
        }
        else if (auto9C693219_val == "StalkerMinion") {
            lv_pointstogive += gv_casterModifier;
        }
        else if (auto9C693219_val == "ImmortalMinion") {
            lv_pointstogive += gv_siegeModifier;
        }
        else {
        }
    }
    else {
    }
    if (((lp_killerowner == 1) || (lp_killerowner == 5))) {
        if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lp_killingunit), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_dyingunit), gv_pointsSearchRadius), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            lv_pointstogive *= gv_aIKillMultiplier;
        }
        else {
            lv_pointstogive = 0.0;
        }
    }
    else {
    }
    return FixedToInt(lv_pointstogive);
}

void gf_CreatePointsTextTag (point lp_location, int lp_killerowner, int lp_amountofpoints, unit lp_dyingunit) {
    // Variable Declarations
    playergroup lv_playerstoshow;
    text lv_texttouse;
    bool lv_aIKill;

    // Variable Initialization
    lv_playerstoshow = PlayerGroupEmpty();
    lv_aIKill = true;

    // Implementation
    if (((lp_killerowner == 1) || (lp_killerowner == 5))) {
        lv_aIKill = true;
    }
    else {
        lv_aIKill = false;
    }
    if ((UnitFilterMatch(lp_dyingunit, 0, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true)) {
        lv_aIKill = false;
    }
    else {
    }
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAlliance(c_playerGroupAlly, lp_killerowner), lv_playerstoshow);
    PlayerGroupAdd(lv_playerstoshow, lp_killerowner);
    if ((lv_aIKill == true)) {
        lv_texttouse = (StringExternal("Param/Value/37F114B3") + StringExternal("Param/Value/A607A2C1") + IntToText(lp_amountofpoints) + StringExternal("Param/Value/1FE0D92F"));
    }
    else {
        lv_texttouse = (StringExternal("Param/Value/A02C8581") + StringExternal("Param/Value/B6D5CFD7") + IntToText(lp_amountofpoints) + StringExternal("Param/Value/FE338225"));
    }
    TextTagCreate(lv_texttouse, 24, lp_location, 1.0, true, false, lv_playerstoshow);
    TextTagSetFadedTransparency(TextTagLastCreated(), c_textTagFadeAll, 70.0);
    TextTagSetTextShadow(TextTagLastCreated(), true);
    if ((lv_aIKill == true)) {
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.3);
    }
    else {
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.75);
        SoundPlayAtPoint(SoundLink("PointsGain", -1), PlayerGroupSingle(lp_killerowner), lp_location, 0.0, 100.0, 0.0);
    }
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 100.00));
    gf_PointsTextTagLife(TextTagLastCreated());
}

void gf_PointsTextTagLife (int lp_texttag) {
    // Implementation
    TextTagSetVelocity(lp_texttag, 2.0, 90.0);
    Wait(0.1, c_timeGame);
    TextTagSetVelocity(lp_texttag, 1.75, 90.0);
    Wait(0.1, c_timeGame);
    TextTagSetVelocity(lp_texttag, 1.5, 90.0);
    Wait(0.1, c_timeGame);
    TextTagSetVelocity(lp_texttag, 1.0, 90.0);
    Wait(0.1, c_timeGame);
    TextTagSetVelocity(lp_texttag, 0.2, 90.0);
    Wait(0.2, c_timeGame);
    TextTagSetVelocity(lp_texttag, 0.0, 90.0);
    Wait(0.25, c_timeGame);
    TextTagSetVelocity(lp_texttag, -0.2, 90.0);
    Wait(0.15, c_timeGame);
    TextTagSetVelocity(lp_texttag, -1.2, 90.0);
    Wait(0.1, c_timeGame);
    TextTagSetVelocity(lp_texttag, -2.0, 90.0);
}

void gf_RespawnBoxCreate () {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    DialogCreate(gv_rSPNBoxWidth, gv_rSPNBoxHeight, c_anchorRight, gv_rSPNXOffset, gv_rSPNYOffset, true);
    gv_rSPNBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gv_rSPNBoxWidth, gv_rSPNBoxHeight, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/89A2A928"), "Assets\\Textures\\ui_battlenet_glue_frame_small_base.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_rSPNBox, 125, 125, c_anchorCenter, 0, 0, StringExternal("Param/Value/5F4D44EB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_rSPNTimerNumberLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize64", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_rSPNBox, 125, 125, c_anchorTop, 0, -25, StringExternal("Param/Value/336092C7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_rSPNTextLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16Bold", PlayerGroupAll());
}

void gf_TeamPointsDialogsCreate () {
    // Implementation
    DialogCreate(gv_tMPTTeamBoxWidth, gv_tMPTTeamBoxHeight, c_anchorCenter, gv_tMPTTeamBoxXOffsetLeft, gv_tMPTTeamBoxYOffset, true);
    gv_tMPTPointsBoxes[1] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gv_tMPTTeamBoxWidth, gv_tMPTTeamBoxHeight, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/324BA49D"), "Assets\\Textures\\ui_battlenet_glue_frame_small_base.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_tMPTPointBoxBGs[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_tMPTPointsLabelWidth, gv_tMPTMidBoxHeight, c_anchorCenter, 0, gv_tMPTPointsLabelYOffset, IntToText(gv_points[1]), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tMPTPointBoxLabels[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), gv_tMPTPointsLabelStyle, PlayerGroupAll());
    DialogCreate(gv_tMPTTeamBoxWidth, gv_tMPTTeamBoxHeight, c_anchorCenter, gv_tMPTTeamBoxXOffsetRight, gv_tMPTTeamBoxYOffset, true);
    gv_tMPTPointsBoxes[2] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gv_tMPTTeamBoxWidth, gv_tMPTTeamBoxHeight, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/AFAD15AE"), "Assets\\Textures\\ui_battlenet_glue_frame_small_base.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_tMPTPointBoxBGs[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0,66*100/255,100), PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_tMPTPointsLabelWidth, gv_tMPTPointsLabelHeight, c_anchorCenter, 0, gv_tMPTPointsLabelYOffset, IntToText(gv_points[2]), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tMPTPointBoxLabels[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), gv_tMPTPointsLabelStyle, PlayerGroupAll());
    DialogCreate(gv_tMPTMidBoxWidth, gv_tMPTMidBoxHeight, c_anchorCenter, 0, gv_tMPTMidBoxYOffset, true);
    gv_tMPTMidBox = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gv_tMPTMidBoxWidth, gv_tMPTMidBoxHeight, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/C3795090"), "Assets\\Textures\\ui_battlenet_glue_frame_small_base.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), ColorWithAlpha(100.00, 100.00, 100.00, 89.80), PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_tMPTMidLabelWidth, gv_tMPTMidLabelHeight, c_anchorCenter, 0, gv_tMPTMidLabelYOffset, StringExternal("Param/Value/6CAB2CD5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), gv_tMPTPointsLabelStyle, PlayerGroupAll());
    TriggerEnable(gt_TeamPointsUpdateText, true);
}

string gf_ConvertIntegerToStringWithCommas (int lp_number) {
    int auto0DBB4D17_ae;
    int auto0DBB4D17_ai;

    // Variable Declarations
    string lv_text;
    string lv_returntext;
    int lv_initialtextlength;
    int lv_i;
    int lv_j;

    // Variable Initialization
    lv_text = IntToString(lp_number);
    lv_returntext = "";
    lv_initialtextlength = StringLength(lv_text);

    // Implementation
    auto0DBB4D17_ae = 1;
    auto0DBB4D17_ai = -1;
    lv_i = lv_initialtextlength;
    for ( ; ( (auto0DBB4D17_ai >= 0 && lv_i <= auto0DBB4D17_ae) || (auto0DBB4D17_ai <= 0 && lv_i >= auto0DBB4D17_ae) ) ; lv_i += auto0DBB4D17_ai ) {
        lv_returntext = (StringSub(lv_text, lv_i, lv_i) + lv_returntext);
        lv_j += 1;
        if ((ModF(lv_j, 3.0) == 0.0) && (lv_i != 1)) {
            lv_returntext = ("," + lv_returntext);
        }
        else {
        }
    }
    return lv_returntext;
}

int gf_PlayerNumbertoPlayerTeam (int lp_player) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(gv_wESTTEAM, lp_player) == true)) {
        lv_team += 1;
    }
    else {
    }
    if ((PlayerGroupHasPlayer(gv_eASTTEAM, lp_player) == true)) {
        lv_team += 2;
    }
    else {
    }
    return lv_team;
}

int gf_PlayerNumbertoPlayerTeamIndex (int lp_player) {
    int auto5951406A_val;
    int autoBD2074F4_ae;
    int autoBD2074F4_ai;
    int auto4303A663_ae;
    int auto4303A663_ai;

    // Variable Declarations
    int lv_i;
    int lv_index;
    int lv_team;

    // Variable Initialization
    lv_team = gf_PlayerNumbertoPlayerTeam(lp_player);

    // Implementation
    auto5951406A_val = lv_team;
    if (auto5951406A_val == 1) {
        autoBD2074F4_ae = 3;
        autoBD2074F4_ai = 1;
        lv_i = 1;
        for ( ; ( (autoBD2074F4_ai >= 0 && lv_i <= autoBD2074F4_ae) || (autoBD2074F4_ai <= 0 && lv_i >= autoBD2074F4_ae) ) ; lv_i += autoBD2074F4_ai ) {
            if ((PlayerGroupPlayer(gv_wESTTEAM, lv_i) == lp_player)) {
                lv_index = lv_i;
            }
            else {
            }
        }
    }
    else if (auto5951406A_val == 2) {
        auto4303A663_ae = 3;
        auto4303A663_ai = 1;
        lv_i = 1;
        for ( ; ( (auto4303A663_ai >= 0 && lv_i <= auto4303A663_ae) || (auto4303A663_ai <= 0 && lv_i >= auto4303A663_ae) ) ; lv_i += auto4303A663_ai ) {
            if ((PlayerGroupPlayer(gv_eASTTEAM, lv_i) == lp_player)) {
                lv_index = lv_i;
            }
            else {
            }
        }
    }
    else {
    }
    return lv_index;
}

int gf_PlayerTeamIndextoPlayerNumber (int lp_team, int lp_index) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    if ((lp_team == 1)) {
        lv_player = PlayerGroupPlayer(gv_wESTTEAM, lp_index);
    }
    else {
    }
    if ((lp_team == 2)) {
        lv_player = PlayerGroupPlayer(gv_eASTTEAM, lp_index);
    }
    else {
    }
    return lv_player;
}

void gf_CreateAbilityButton (string lp_image, text lp_tooltipText, text lp_abilityName, int lp_heroID) {
    // Implementation
    gv_abilityButton[lp_heroID][gv_abilityButtonTicker].lv_abilityIcon = lp_image;
    gv_abilityButton[lp_heroID][gv_abilityButtonTicker].lv_abilityTooltip = lp_tooltipText;
    gv_abilityButton[lp_heroID][gv_abilityButtonTicker].lv_abilityName = lp_abilityName;
    if (gv_abilityButtonTicker >= 5) {
        gv_abilityButtonTicker = 1;
    }
    else {
        gv_abilityButtonTicker = gv_abilityButtonTicker + 1;
    }
}

void gf_InitializeAbilityButtons (string lp_heroUnitType) {
    string autoFA649533_val;

    // Implementation
    autoFA649533_val = lp_heroUnitType;
    if (autoFA649533_val == "Ananias") {
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "Vanguard", "Icon", c_playerAny)), StringExternal("Param/Value/C285E7BF"), StringExternal("Param/Value/88222D3F"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "LaunchPylon", "Icon", c_playerAny)), StringExternal("Param/Value/E1623648"), StringExternal("Param/Value/D8E065BE"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "ShockCleave", "Icon", 1)), StringExternal("Param/Value/359636FE"), StringExternal("Param/Value/B87817D0"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "PersonalWarp", "Icon", 1)), StringExternal("Param/Value/F34CBBEA"), StringExternal("Param/Value/26092B68"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "PylonOvercharge", "Icon", 1)), StringExternal("Param/Value/D150C86A"), StringExternal("Param/Value/46119E8F"), gv_cHSLnHeroButtons);
    }
    else if (autoFA649533_val == "Bengura") {
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "Underfoot", "Icon", c_playerAny)), StringExternal("Param/Value/FC2DFF9A"), StringExternal("Param/Value/5E1B38A2"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "Fluxclaws", "Icon", c_playerAny)), StringExternal("Param/Value/D55E31F4"), StringExternal("Param/Value/9CEB9F04"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "NutritiveVomit", "Icon", 1)), StringExternal("Param/Value/572D5712"), StringExternal("Param/Value/440BC49D"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "HookedTongue", "Icon", 1)), StringExternal("Param/Value/F4797800"), StringExternal("Param/Value/1338ED33"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "Symbiosis", "Icon", 1)), StringExternal("Param/Value/9B1D7863"), StringExternal("Param/Value/CE1A8A5B"), gv_cHSLnHeroButtons);
    }
    else if (autoFA649533_val == "Brooke") {
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-terran-domination.dds", StringExternal("Param/Value/8A659C2D"), StringExternal("Param/Value/0C0CE07E"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-terran-snipe.dds", StringExternal("Param/Value/FF769908"), StringExternal("Param/Value/215D8756"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-terran-setrallypoint.dds", StringExternal("Param/Value/D6E25112"), StringExternal("Param/Value/F884DDFE"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-terran-raynortossgrenade.dds", StringExternal("Param/Value/567D9E0F"), StringExternal("Param/Value/43BFE2DC"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-protoss-chronoboost.dds", StringExternal("Param/Value/4BE47C38"), StringExternal("Param/Value/51C68606"), gv_cHSLnHeroButtons);
    }
    else if (autoFA649533_val == "Damask") {
        gf_CreateAbilityButton("Assets\\Textures\\btn-unit-zerg-larva.dds", StringExternal("Param/Value/19BA83FA"), StringExternal("Param/Value/C6977FDC"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-zerg-banelingspooge.dds", StringExternal("Param/Value/3C4A41E6"), StringExternal("Param/Value/467F6D7B"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-zerg-siphon.dds", StringExternal("Param/Value/98EE61E6"), StringExternal("Param/Value/50A78348"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-zerg-corruption-color.dds", StringExternal("Param/Value/F3598E97"), StringExternal("Param/Value/BB32C475"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-building-zerg-nydusworm.dds", StringExternal("Param/Value/94007535"), StringExternal("Param/Value/CE1D6F7C"), gv_cHSLnHeroButtons);
    }
    else if (autoFA649533_val == "Fenix") {
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "KhalaniRestoration", "Icon", c_playerAny)), StringExternal("Param/Value/E23C5F05"), StringExternal("Param/Value/31FD7D44"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "SeekerBeam", "Icon", c_playerAny)), StringExternal("Param/Value/2A639540"), StringExternal("Param/Value/8E7E1470"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "RetrofluxBubble", "Icon", 1)), StringExternal("Param/Value/6D099359"), StringExternal("Param/Value/788388FC"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "Chronoshield", "Icon", 1)), StringExternal("Param/Value/193270CA"), StringExternal("Param/Value/E3DF4AAD"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "LightAspect", "Icon", 1)), StringExternal("Param/Value/640D56A8"), StringExternal("Param/Value/9A640D32"), gv_cHSLnHeroButtons);
    }
    else if (autoFA649533_val == "Herod") {
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-terran-electricfield.dds", StringExternal("Param/Value/2641B53A"), StringExternal("Param/Value/7A811E71"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-protoss-feedback-color.dds", StringExternal("Param/Value/93266B95"), StringExternal("Param/Value/094B0942"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-zerg-burrow-color.dds", StringExternal("Param/Value/845138C5"), StringExternal("Param/Value/40EA296B"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-upgrade-zerg-explosiveglaive.dds", StringExternal("Param/Value/2FC51273"), StringExternal("Param/Value/67C94324"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-terran-emp-color.dds", StringExternal("Param/Value/206E8062"), StringExternal("Param/Value/E2E290FA"), gv_cHSLnHeroButtons);
    }
    else if (autoFA649533_val == "Kaine") {
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "FrostShards", "Icon", c_playerAny)), StringExternal("Param/Value/D710D553"), StringExternal("Param/Value/D523EA45"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "GlacialTrail", "Icon", c_playerAny)), StringExternal("Param/Value/9C5E863C"), StringExternal("Param/Value/306BADED"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "Twingale", "Icon", 1)), StringExternal("Param/Value/61144ADB"), StringExternal("Param/Value/A16BC21B"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "Frostbite", "Icon", 1)), StringExternal("Param/Value/7680305F"), StringExternal("Param/Value/3C24324A"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton((CatalogFieldValueGet(c_gameCatalogButton, "Icebreaker", "Icon", 1)), StringExternal("Param/Value/3F12971B"), StringExternal("Param/Value/06181259"), gv_cHSLnHeroButtons);
    }
    else if (autoFA649533_val == "HeroRocketeer") {
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-terran-unstablepayload.dds", StringExternal("Param/Value/92497A3C"), StringExternal("Param/Value/D7B9802C"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-techupgrade-terran-devastatormissiles.dds", StringExternal("Param/Value/4FD246E3"), StringExternal("Param/Value/2E72678F"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-terran-bombardmentstrike-color.dds", StringExternal("Param/Value/060A1AFC"), StringExternal("Param/Value/CA79DCF4"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-terran-huntermissile-color.dds", StringExternal("Param/Value/1EE55A21"), StringExternal("Param/Value/F2D49CE3"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-terran-redlinereactor.dds", StringExternal("Param/Value/F0B7ED9D"), StringExternal("Param/Value/CC1B38E1"), gv_cHSLnHeroButtons);
    }
    else if (autoFA649533_val == "Melchior") {
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-protoss-preordain.dds", StringExternal("Param/Value/4EFF9242"), StringExternal("Param/Value/4ECEAF7E"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-protoss-purify.dds", StringExternal("Param/Value/5B241FCC"), StringExternal("Param/Value/6F7D2ECB"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-protoss-psistorm-color.dds", StringExternal("Param/Value/F2FDD7A6"), StringExternal("Param/Value/99CE34B0"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-protoss-forcefield-color.dds", StringExternal("Param/Value/CD88FD68"), StringExternal("Param/Value/30833B3E"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-kerrigan-abilityefficiency.dds", StringExternal("Param/Value/D6707A44"), StringExternal("Param/Value/2D327CBC"), gv_cHSLnHeroButtons);
    }
    else if (autoFA649533_val == "Niles") {
        gf_CreateAbilityButton("Assets\\Textures\\btn-techupgrade-terran-twin-linkedflamethrower.dds", StringExternal("Param/Value/C0C77AA0"), StringExternal("Param/Value/998E5D23"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-upgrade-terran-infernalpreigniter.dds", StringExternal("Param/Value/AE156640"), StringExternal("Param/Value/F9E151BE"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-zerg-creepspread.dds", StringExternal("Param/Value/C9A7F9B3"), StringExternal("Param/Value/5ECD64A7"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-terran-emergencythrusters.dds", StringExternal("Param/Value/92E30616"), StringExternal("Param/Value/A904E16B"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-research-zerg-perditionturret.dds", StringExternal("Param/Value/6B948DC6"), StringExternal("Param/Value/3CF313C1"), gv_cHSLnHeroButtons);
    }
    else if (autoFA649533_val == "SpyHero") {
        gf_CreateAbilityButton("Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel3.dds", StringExternal("Param/Value/33B81760"), StringExternal("Param/Value/C1F3FFAB"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-protoss-oraclepulsarcannonon.dds", StringExternal("Param/Value/E75754BB"), StringExternal("Param/Value/778BA48C"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-protoss-permanentlycloaked-darktemplar-color.dds", StringExternal("Param/Value/177BF835"), StringExternal("Param/Value/DD90485E"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-terran-spidermine.dds", StringExternal("Param/Value/BF4655B5"), StringExternal("Param/Value/3F346427"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-zerg-disguise.dds", StringExternal("Param/Value/830A0789"), StringExternal("Param/Value/0C870BBF"), gv_cHSLnHeroButtons);
    }
    else if (autoFA649533_val == "TheTorrasque") {
        gf_CreateAbilityButton("Assets\\Textures\\ui_waypointmove_ringlmp.dds", StringExternal("Param/Value/D1FBE975"), StringExternal("Param/Value/C0543CFD"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-tips-terran-energynova.dds", StringExternal("Param/Value/AFF99190"), StringExternal("Param/Value/178107F6"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-neutral-ursadonleap.dds", StringExternal("Param/Value/6A66AA6B"), StringExternal("Param/Value/76E7B0BF"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-ability-kerrigan-psychicshift.dds", StringExternal("Param/Value/3760BB23"), StringExternal("Param/Value/F722ACC4"), gv_cHSLnHeroButtons);
        gf_CreateAbilityButton("Assets\\Textures\\btn-upgrade-zerg-swarmfrenzy.dds", StringExternal("Param/Value/33EE1102"), StringExternal("Param/Value/839E4112"), gv_cHSLnHeroButtons);
    }
    else {
    }
}

void gf_CreateHeroButton (string lp_unitType, string lp_icon, text lp_tooltip, string lp_previewUnitType, string lp_previewCamera) {
    // Implementation
    gv_heroButtonRecords[gv_cHSLnHeroButtons].lv_hero = lp_unitType;
    gv_heroButtonRecords[gv_cHSLnHeroButtons].lv_icon = lp_icon;
    gv_heroButtonRecords[gv_cHSLnHeroButtons].lv_tooltip = lp_tooltip;
    gv_heroButtonRecords[gv_cHSLnHeroButtons].lv_iDNumber = gv_cHSLnHeroButtons;
    gv_heroButtonRecords[gv_cHSLnHeroButtons].lv_previewUnitType = lp_previewUnitType;
    gv_heroButtonRecords[gv_cHSLnHeroButtons].lv_previewCamera = lp_previewCamera;
    gf_InitializeAbilityButtons(lp_unitType);
    gv_cHSLnHeroButtons += 1;
}

void gf_InitializeHeroButtons () {
    // Implementation
    gf_CreateHeroButton("Ananias", "Assets\\Textures\\btn-unit-protoss-zealot.dds", StringExternal("Param/Value/0D4B6081"), "AnaniasSELECTPREVIEW", "Star2CameraLow04");
    gf_CreateHeroButton("Bengura", "Assets\\Textures\\btn-unit-zerg-primalzergling.dds", StringExternal("Param/Value/F84134A5"), "BenguraSELECTPREVIEW", "Star2CameraLow08");
    gf_CreateHeroButton("Brooke", "Assets\\Textures\\btn-unit-terran-nova.dds", StringExternal("Param/Value/57542520"), "BrookeSELECTPREVIEW", "Star2CameraLow04");
    gf_CreateHeroButton("Damask", "Assets\\Textures\\btn-unit-zerg-stukov.dds", StringExternal("Param/Value/32759D6B"), "DamaskSELECTPREVIEW", "Star2CameraLow05");
    gf_CreateHeroButton("Fenix", "Assets\\Textures\\btn-unit-protoss-stalker.dds", StringExternal("Param/Value/DA660CFE"), "FenixSELECTPREVIEW", "Star2CameraLow08");
    gf_CreateHeroButton("Herod", "Assets\\Textures\\btn-unit-zerg-primalroach.dds", StringExternal("Param/Value/4583514C"), "Herod2", "Star2CameraLow05");
    gf_CreateHeroButton("HeroRocketeer", "Assets\\Textures\\btn-unit-terran-marauder.dds", StringExternal("Param/Value/A5A3D868"), "JordanSELECTPREVIEW", "Star2CameraLow04");
    gf_CreateHeroButton("Kaine", "Assets\\Textures\\btn-unit-protoss-archon.dds", StringExternal("Param/Value/43CD731B"), "KaineSELECTPREVIEW", "Star2CameraMid08");
    gf_CreateHeroButton("Niles", "Assets\\Textures\\btn-unit-terran-hellionmercenary.dds", StringExternal("Param/Value/EDBE5513"), "NilesSELECTPREVIEW", "Star2CameraLow07");
    gf_CreateHeroButton("Melchior", "Assets\\Textures\\btn-unit-protoss-hightemplar.dds", StringExternal("Param/Value/31B53D5E"), "MelchiorSELECTPREVIEW", "Star2CameraLow05");
    gf_CreateHeroButton("TheTorrasque", "Assets\\Textures\\btn-unit-zerg-ultralisk-torrasque.dds", StringExternal("Param/Value/6E394C6D"), "TheTorrasqueSELECTPREVIEW", "Star2CameraLow08");
    gf_CreateHeroButton("SpyHero", "Assets\\Textures\\btn-unit-protoss-darktemplar.dds", StringExternal("Param/Value/C15563DE"), "SilasSELECTPREVIEW", "Star2CameraLow05");
    gv_cHSLnHeroButtons -= 1;
}

int gf_DialogItemtoHeroButtonID (int lp_dialogItemUsed) {
    int auto29772B42_ae;
    int auto29772B42_ai;

    // Variable Declarations
    int lv_buttonID;
    int lv_i;

    // Variable Initialization

    // Implementation
    auto29772B42_ae = gv_cHSLnHeroButtons;
    auto29772B42_ai = 1;
    lv_i = 1;
    for ( ; ( (auto29772B42_ai >= 0 && lv_i <= auto29772B42_ae) || (auto29772B42_ai <= 0 && lv_i >= auto29772B42_ae) ) ; lv_i += auto29772B42_ai ) {
        if ((lp_dialogItemUsed == gv_heroButtons[lv_i])) {
            lv_buttonID = lv_i;
        }
        else {
        }
    }
    return lv_buttonID;
}

void gf_BeginCHSLTimer () {
    // Implementation
    TimerStart(gv_cCHSLTimer, gv_cCHSLTimerDuration, false, c_timeGame);
}

void gf_ChampionSelectDialogCreate () {
    int autoBFF2879E_ae;
    int autoBFF2879E_ai;
    int auto96648399_ae;
    int auto96648399_ai;
    int auto57D8DE72_ae;
    int auto57D8DE72_ai;
    int auto32792650_ae;
    int auto32792650_ai;
    int autoB9FD309B_ae;
    int autoB9FD309B_ai;
    int auto79ABC215_ae;
    int auto79ABC215_ai;
    int autoCACF60D2_ae;
    int autoCACF60D2_ai;
    int autoDAEC71AC_ae;
    int autoDAEC71AC_ai;

    // Variable Declarations
    int lv_iRow;
    int lv_iCol;
    int lv_iDialogItem;
    int lv_x;
    int lv_y;
    int lv_dialogWidth;
    int lv_dialogHeight;
    text[3][4] lv_playerNameText;

    // Variable Initialization
    lv_iDialogItem = 1;
    lv_dialogWidth = ((gv_cCHSLWIDTHHorizontalMargin * 2) + (gv_cCHSLPlayerBoxSize * gv_cCHSLPlayerBoxnCols) + (gv_cCHSLWIDTHPlayerBoxHorizontalGap * 2) + gv_cHSLWIDTHHeroButtons);
    lv_dialogHeight = ((gv_cCHSLPlayerBoxSize * gv_cCHSLPlayerBoxnRows) + gv_cCHSLHeaderHeight + gv_cCHSLHeaderGap + (gv_cHSLPlayerLabelHeight * gv_cCHSLPlayerBoxnRows) + gv_cCHSLHEIGHTBottomMargin);

    // Implementation
    DialogCreate(lv_dialogWidth, lv_dialogHeight, c_anchorCenter, 0, 0, true);
    gv_championSelect = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_dialogWidth, lv_dialogHeight, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/00D9D3D8"), "Assets\\Textures\\ui_battlenet_glue_frame_small_base.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_cCHSLHeaderLabelWidth, gv_cCHSLHeaderLabelHeight, c_anchorTopLeft, ((lv_dialogWidth / 2) + (gv_cCHSLHeaderLabelWidth / -2)), (gv_cCHSLHeaderLabelHeight), StringExternal("Param/Value/B8AFA3A5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_cHSLHeaderLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize36Bold", PlayerGroupAll());
    autoBFF2879E_ae = 3;
    autoBFF2879E_ai = 1;
    lv_iRow = 1;
    for ( ; ( (autoBFF2879E_ai >= 0 && lv_iRow <= autoBFF2879E_ae) || (autoBFF2879E_ai <= 0 && lv_iRow >= autoBFF2879E_ae) ) ; lv_iRow += autoBFF2879E_ai ) {
        if ((PlayerGroupPlayer(gv_wESTTEAM, lv_iRow) != c_playerAny)) {
            lv_playerNameText[1][lv_iRow] = PlayerName(PlayerGroupPlayer(gv_wESTTEAM, lv_iRow));
        }
        else {
            lv_playerNameText[1][lv_iRow] = StringExternal("Param/Value/9D859826");
        }
    }
    auto96648399_ae = 3;
    auto96648399_ai = 1;
    lv_iRow = 1;
    for ( ; ( (auto96648399_ai >= 0 && lv_iRow <= auto96648399_ae) || (auto96648399_ai <= 0 && lv_iRow >= auto96648399_ae) ) ; lv_iRow += auto96648399_ai ) {
        if ((PlayerGroupPlayer(gv_eASTTEAM, lv_iRow) != c_playerAny)) {
            lv_playerNameText[2][lv_iRow] = PlayerName(PlayerGroupPlayer(gv_eASTTEAM, lv_iRow));
        }
        else {
            lv_playerNameText[2][lv_iRow] = StringExternal("Param/Value/02D3E15D");
        }
    }
    lv_y = ((gv_cCHSLPlayerBoxSize / 2) + gv_cCHSLHeaderHeight + gv_cCHSLHeaderGap);
    auto57D8DE72_ae = gv_cCHSLPlayerBoxnRows;
    auto57D8DE72_ai = 1;
    lv_iRow = 1;
    for ( ; ( (auto57D8DE72_ai >= 0 && lv_iRow <= auto57D8DE72_ae) || (auto57D8DE72_ai <= 0 && lv_iRow >= auto57D8DE72_ae) ) ; lv_iRow += auto57D8DE72_ai ) {
        lv_x = (gv_cCHSLWIDTHHorizontalMargin + gv_cHSLPlayerBoxHalf);
        auto32792650_ae = gv_cCHSLPlayerBoxnCols;
        auto32792650_ai = 1;
        lv_iCol = 1;
        for ( ; ( (auto32792650_ai >= 0 && lv_iCol <= auto32792650_ae) || (auto32792650_ai <= 0 && lv_iCol >= auto32792650_ae) ) ; lv_iCol += auto32792650_ai ) {
            DialogCreate(gv_cCHSLPlayerBoxSize, gv_cCHSLPlayerBoxSize, c_anchorCenter, 0, 0, true);
            gv_playerBoxes[lv_iCol][lv_iRow] = DialogLastCreated();
            DialogSetImageVisible(DialogLastCreated(), false);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gv_cCHSLPlayerBoxSize, gv_cCHSLPlayerBoxSize, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/79E1B08D"), "Assets\\Textures\\ui_battlenet_glues_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_playerBoxBackgrounds[lv_iCol][lv_iRow] = DialogControlLastCreated();
            DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
            DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
            DialogSetPositionRelative(DialogLastCreated(), c_anchorCenter, gv_championSelect, c_anchorTopLeft, lv_x, lv_y);
            DialogSetTransparency(DialogLastCreated(), 15.0);
            libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(254*100/255,138*100/255,14*100/255), PlayerGroupSingle(gf_PlayerTeamIndextoPlayerNumber(lv_iCol, lv_iRow)));
            libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupSingle(gf_PlayerTeamIndextoPlayerNumber(lv_iCol, lv_iRow)));
            libNtve_gf_CreateDialogItemLabel(gv_championSelect, gv_cHSLPlayerLabelWidth, gv_cHSLPlayerLabelHeight, c_anchorTopLeft, (lv_x + (gv_cHSLPlayerLabelWidth / -2)), (lv_y + gv_cHSLPlayerBoxHalf), lv_playerNameText[lv_iCol][lv_iRow], ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_playerBoxLabels[lv_iCol][lv_iRow] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16Bold", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(gv_playerBoxes[lv_iCol][lv_iRow], gv_cCHSLPlayerPortraitWidth, gv_cCHSLPlayerPortraitHeight, c_anchorTopLeft, gv_cHSLPlayerPortraitInlayx, gv_cHSLPlayerPortraitInlayy, StringExternal("Param/Value/17361373"), "EditorData\\Images\\BrushShapeSquare.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_playerPortraitImage[lv_iCol][lv_iRow] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libNtve_gf_CreateDialogItemImage(gv_playerBoxes[lv_iCol][lv_iRow], gv_cCHSLPlayerCheckmarkWidth, gv_cCHSLPlayerCheckmarkHeight, c_anchorTopLeft, gv_cHSLPlayerCheckmarkInlayx, gv_cHSLPlayerCheckmarkInlayy, StringExternal("Param/Value/0A17D64D"), "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_blue.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_playerPortraitCheckmark[lv_iCol][lv_iRow] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            lv_x = (gv_cCHSLWIDTHHorizontalMargin + gv_cCHSLPlayerBoxSize + gv_cCHSLWIDTHPlayerBoxHorizontalGap + gv_cHSLWIDTHHeroButtons + gv_cCHSLWIDTHPlayerBoxHorizontalGap + gv_cHSLPlayerBoxHalf + gv_cCHSLWIDTHNewColPadding);
        }
        lv_y += (gv_cCHSLPlayerBoxSize + gv_cHSLPlayerLabelHeight);
    }
    lv_y = ((gv_cCHSLHeroButtonSize / 2) + gv_cCHSLHeaderHeight + gv_cCHSLHeaderGap);
    autoB9FD309B_ae = gv_cHSLHeroButtonnRows;
    autoB9FD309B_ai = 1;
    lv_iRow = 1;
    for ( ; ( (autoB9FD309B_ai >= 0 && lv_iRow <= autoB9FD309B_ae) || (autoB9FD309B_ai <= 0 && lv_iRow >= autoB9FD309B_ae) ) ; lv_iRow += autoB9FD309B_ai ) {
        lv_x = (gv_cCHSLPlayerBoxSize + gv_cCHSLWIDTHHorizontalMargin + gv_cCHSLWIDTHPlayerBoxHorizontalGap);
        auto79ABC215_ae = gv_cCHSLHeroButtonnCols;
        auto79ABC215_ai = 1;
        lv_iCol = 1;
        for ( ; ( (auto79ABC215_ai >= 0 && lv_iCol <= auto79ABC215_ae) || (auto79ABC215_ai <= 0 && lv_iCol >= auto79ABC215_ae) ) ; lv_iCol += auto79ABC215_ai ) {
            libNtve_gf_CreateDialogItemButton(gv_championSelect, gv_cCHSLHeroButtonSize, gv_cCHSLHeroButtonSize, c_anchorTopLeft, lv_x, lv_y, gv_heroButtonRecords[lv_iDialogItem].lv_tooltip, StringExternal("Param/Value/591A67FD"), "");
            gv_heroButtons[lv_iDialogItem] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_championSelect, gv_cCHSLHeroButtonIconSize, gv_cCHSLHeroButtonIconSize, c_anchorTopLeft, (lv_x + gv_cHSLHeroButtonIconInlay), (lv_y + gv_cHSLHeroButtonIconInlay), StringExternal("Param/Value/50C36F51"), gv_heroButtonRecords[lv_iDialogItem].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_heroIcons[lv_iDialogItem] = DialogControlLastCreated();
            lv_x += (gv_cCHSLHeroButtonSize + gv_cCHSLHeroButtonExtra);
            lv_iDialogItem += 1;
        }
        lv_y += (gv_cCHSLHeroButtonSize + gv_cCHSLHeroButtonExtra);
    }
    lv_iDialogItem = 1;
    lv_y = (lv_dialogHeight - (gv_cCHSLAbilityButtonExtra + gv_cCHSLAbilityButtonIconSize + gv_cCHSLHEIGHTBottomMargin));
    autoCACF60D2_ae = gv_cHSLAbilityButtonnRows;
    autoCACF60D2_ai = 1;
    lv_iRow = 1;
    for ( ; ( (autoCACF60D2_ai >= 0 && lv_iRow <= autoCACF60D2_ae) || (autoCACF60D2_ai <= 0 && lv_iRow >= autoCACF60D2_ae) ) ; lv_iRow += autoCACF60D2_ai ) {
        lv_x = (gv_cCHSLWIDTHHorizontalMargin + gv_cCHSLPlayerBoxSize + gv_cCHSLWIDTHPlayerBoxHorizontalGap);
        autoDAEC71AC_ae = gv_cHSLAbilityButtonnCols;
        autoDAEC71AC_ai = 1;
        lv_iCol = 1;
        for ( ; ( (autoDAEC71AC_ai >= 0 && lv_iCol <= autoDAEC71AC_ae) || (autoDAEC71AC_ai <= 0 && lv_iCol >= autoDAEC71AC_ae) ) ; lv_iCol += autoDAEC71AC_ai ) {
            libNtve_gf_CreateDialogItemButton(gv_championSelect, gv_cCHSLAbilityButtonSize, gv_cCHSLAbilityButtonSize, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/54043491"), StringExternal("Param/Value/380455C5"), "");
            gv_heroAbilityButtons[lv_iDialogItem] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_championSelect, gv_cCHSLAbilityButtonIconSize, gv_cCHSLAbilityButtonIconSize, c_anchorTopLeft, (lv_x + gv_cHSLAbilityButtonIconInlay), (lv_y + gv_cHSLAbilityButtonIconInlay), StringExternal("Param/Value/5B87926C"), "EditorData\\Images\\BrushShapeCircle.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_heroAbilityButtonIcons[lv_iDialogItem] = DialogControlLastCreated();
            lv_x += (gv_cCHSLAbilityButtonSize + gv_cCHSLAbilityButtonExtra);
            lv_iDialogItem += 1;
        }
        lv_y += (gv_cCHSLAbilityButtonSize + gv_cCHSLAbilityButtonExtra);
    }
    lv_x = (gv_cCHSLWIDTHHorizontalMargin + gv_cCHSLPlayerBoxSize + gv_cCHSLWIDTHPlayerBoxHorizontalGap + gv_cHSLWIDTHHeroButtons + (gv_cCHSLLockinButtonWidth * -1));
    lv_y = (lv_dialogHeight - (gv_cCHSLAbilityButtonIconSize + gv_cCHSLHEIGHTBottomMargin + gv_cCHSLLockinButtonGap + gv_cCHSLLockinButtonHeight));
    libNtve_gf_CreateDialogItemButton(gv_championSelect, gv_cCHSLLockinButtonWidth, gv_cCHSLLockinButtonHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/7738AB57"), StringExternal("Param/Value/2063C835"), "");
    gv_lockinButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32Bold", PlayerGroupAll());
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogCreate(gv_cCHSLTimerBoxWidth, gv_cCHSLTimerBoxHeight, c_anchorCenter, 0, 0, true);
    gv_timerDialog = DialogLastCreated();
    DialogSetPositionRelative(DialogLastCreated(), c_anchorCenter, gv_championSelect, c_anchorTopLeft, gv_cCHSLTimerBoxWidthOffset, gv_cCHSLTimerBoxHeightOffset);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gv_cCHSLTimerBoxWidth, gv_cCHSLTimerBoxHeight, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/0D948735"), "Assets\\Textures\\ui_battlenet_glue_frame_small_base.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(gv_timerDialog, gv_cCHSLTimerLabelWidth, gv_cCHSLTimerLabelHeight, c_anchorCenter, gv_cHSLTimerLabelWidthOffset, gv_cHSLTimerLabelHeightOffset, FixedToText(gv_cCHSLTimerDuration, c_fixedPrecisionAny), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_timerLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize52", PlayerGroupAll());
    DialogCreate(gv_cCHSLHeroModelDialogWidth, gv_cHSLHeroModelDialogHeight, c_anchorCenter, 0, 0, true);
    gv_heroModelDialog = DialogLastCreated();
    lv_x = (gv_cCHSLWIDTHHorizontalMargin + gv_cCHSLPlayerBoxSize + gv_cCHSLWIDTHPlayerBoxHorizontalGap);
    lv_y = (gv_cCHSLHeaderHeight + gv_cCHSLHeaderGap + (gv_cCHSLHeroButtonSize * gv_cHSLHeroButtonnRows) + (gv_cCHSLHeroButtonExtra * (gv_cHSLHeroButtonnRows - 1)) + gv_cCHSLHeroModelDialogGap);
    DialogSetPositionRelative(gv_heroModelDialog, c_anchorTopLeft, gv_championSelect, c_anchorTopLeft, lv_x, lv_y);
    DialogSetImageVisible(gv_heroModelDialog, false);
    libNtve_gf_CreateDialogItemImage(gv_heroModelDialog, gv_cCHSLHeroModelDialogWidth, gv_cHSLHeroModelDialogHeight, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/3AE0AB1A"), "Assets\\Textures\\ui_battlenet_challenge_frame_sub.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(gv_heroModelDialog, PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    gv_heroModelItem = DialogControlLastCreated();
    DialogControlSetPosition(gv_heroModelItem, PlayerGroupAll(), c_anchorBottom, 0, (gv_cHSLHeroModelDialogHeight * -1));
    DialogControlSetPosition(gv_heroModelItem, PlayerGroupAll(), c_anchorBottom, 0, ((gv_cHSLHeroModelDialogHeight * -1) + gv_cCHSLHeroModelBottomMargin));
    DialogControlSetSize(gv_heroModelItem, PlayerGroupAll(), gv_cHSLHeroModelWidth, gv_cHSLHeroModelHeight);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "InvisiblePylon", PlayerGroupAll());
    libNtve_gf_SetDialogItemCamera(gv_heroModelItem, "Star2CameraLow05", PlayerGroupAll());
    Wait(0.0625, c_timeGame);
    ActorSend(ActorFromDialogControl(DialogControlLastCreated()), "SetScale 0.500000");
    libNtve_gf_SetDialogItemLight(gv_heroModelItem, "Starship", PlayerGroupAll());
    DialogSetVisible(gv_championSelect, PlayerGroupAll(), true);
}

void gf_HideSCUI () {
    playergroup auto1118CD80_g;
    int auto1118CD80_p;

    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Implementation
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeMinerals, false);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    auto1118CD80_g = PlayerGroupAll(); 
    auto1118CD80_p = 1;
    for ( ; auto1118CD80_p <= PlayerGroupCount(auto1118CD80_g) ; auto1118CD80_p += BoolToInt(lv_p == PlayerGroupPlayer(auto1118CD80_g, auto1118CD80_p)) ) {
        lv_p = PlayerGroupPlayer(auto1118CD80_g, auto1118CD80_p);
        TechTreeUnitHelpDefault(lv_p, false);
        TechTreeUnitHelp(lv_p, "Ananias", true);
        TechTreeUnitHelp(lv_p, "TheTorrasque", true);
        TechTreeUnitHelp(lv_p, "Kaine", true);
        TechTreeUnitHelp(lv_p, "Fenix", true);
        TechTreeUnitHelp(lv_p, "Melchior", true);
        TechTreeUnitHelp(lv_p, "Damask", true);
        TechTreeUnitHelp(lv_p, "Bengura", true);
        TechTreeUnitHelp(lv_p, "SpyHero", true);
        TechTreeUnitHelp(lv_p, "Herod", true);
        TechTreeUnitHelp(lv_p, "HeroRocketeer", true);
        TechTreeUnitHelp(lv_p, "Niles", true);
        TechTreeUnitHelp(lv_p, "Brooke", true);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Human Players Group
//--------------------------------------------------------------------------------------------------
bool gt_InitializeHumanPlayersGroup_Func (bool testConds, bool runActions) {
    playergroup auto97D52539_g;
    int auto97D52539_p;

    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto97D52539_g = PlayerGroupAll(); 
    auto97D52539_p = 1;
    for ( ; auto97D52539_p <= PlayerGroupCount(auto97D52539_g) ; auto97D52539_p += BoolToInt(lv_p == PlayerGroupPlayer(auto97D52539_g, auto97D52539_p)) ) {
        lv_p = PlayerGroupPlayer(auto97D52539_g, auto97D52539_p);
        if ((PlayerStatus(lv_p) == c_playerStatusActive) && (PlayerType(lv_p) == c_playerTypeUser)) {
            PlayerGroupAdd(gv_humanPlayers, lv_p);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeHumanPlayersGroup_Init () {
    gt_InitializeHumanPlayersGroup = TriggerCreate("gt_InitializeHumanPlayersGroup_Func");
    TriggerAddEventMapInit(gt_InitializeHumanPlayersGroup);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Spawn Points
//--------------------------------------------------------------------------------------------------
bool gt_InitializeSpawnPoints_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_westteamspawnpoints[1] = PointFromId(1120);
    gv_westteamspawnpoints[2] = PointFromId(1671);
    gv_westteamspawnpoints[3] = PointFromId(1673);
    gv_eastteamspawnpoints[1] = PointFromId(1122);
    gv_eastteamspawnpoints[2] = PointFromId(1672);
    gv_eastteamspawnpoints[3] = PointFromId(1674);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeSpawnPoints_Init () {
    gt_InitializeSpawnPoints = TriggerCreate("gt_InitializeSpawnPoints_Func");
    TriggerAddEventMapInit(gt_InitializeSpawnPoints);
}

//--------------------------------------------------------------------------------------------------
// Trigger: effect target debugging
//--------------------------------------------------------------------------------------------------
bool gt_effecttargetdebugging_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/56D9F634") + UnitTypeGetName(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitOrigin)))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/68F97300") + UnitTypeGetName(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitOuter)))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/B9BFB50C") + UnitTypeGetName(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/87846A6D") + UnitTypeGetName(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/8E97A7E6") + UnitTypeGetName(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_effecttargetdebugging_Init () {
    gt_effecttargetdebugging = TriggerCreate("gt_effecttargetdebugging_Func");
    TriggerEnable(gt_effecttargetdebugging, false);
    TriggerAddEventPlayerEffectUsed(gt_effecttargetdebugging, c_playerAny, "ApplyFatalResponse");
}

//--------------------------------------------------------------------------------------------------
// Trigger: debug options
//--------------------------------------------------------------------------------------------------
bool gt_debugoptions_Func (bool testConds, bool runActions) {
    string auto8604688A_val;
    int auto820D15D5_ae;
    int auto820D15D5_ai;
    int auto9447F76A_ae;
    int auto9447F76A_ai;
    int auto4179A28D_ae;
    int auto4179A28D_ai;
    int auto3D32993D_ae;
    int auto3D32993D_ai;

    // Variable Declarations
    int lv_i;
    int lv_j;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto8604688A_val = EventChatMessage(false);
    if (auto8604688A_val == "debug view") {
        CameraApplyInfo(2, CameraInfoFromId(169), 0.5, -1, 10.0, true);
    }
    else if (auto8604688A_val == "debug skip") {
        TimerPause(gv_cCHSLTimer, true);
        TriggerExecute(gt_ChampSelectEnding, false, false);
    }
    else if (auto8604688A_val == "debug hidecui") {
        DialogSetVisible(gv_championSelect, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_heroModelDialog, PlayerGroupSingle(EventPlayer()), false);
        auto820D15D5_ae = 2;
        auto820D15D5_ai = 1;
        lv_i = 1;
        for ( ; ( (auto820D15D5_ai >= 0 && lv_i <= auto820D15D5_ae) || (auto820D15D5_ai <= 0 && lv_i >= auto820D15D5_ae) ) ; lv_i += auto820D15D5_ai ) {
            auto9447F76A_ae = 3;
            auto9447F76A_ai = 1;
            lv_j = 1;
            for ( ; ( (auto9447F76A_ai >= 0 && lv_j <= auto9447F76A_ae) || (auto9447F76A_ai <= 0 && lv_j >= auto9447F76A_ae) ) ; lv_j += auto9447F76A_ai ) {
                DialogSetVisible(gv_playerBoxes[lv_i][lv_j], PlayerGroupSingle(EventPlayer()), false);
            }
        }
    }
    else if (auto8604688A_val == "debug showcui") {
        DialogSetVisible(gv_championSelect, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_heroModelDialog, PlayerGroupSingle(EventPlayer()), true);
        auto4179A28D_ae = 2;
        auto4179A28D_ai = 1;
        lv_i = 1;
        for ( ; ( (auto4179A28D_ai >= 0 && lv_i <= auto4179A28D_ae) || (auto4179A28D_ai <= 0 && lv_i >= auto4179A28D_ae) ) ; lv_i += auto4179A28D_ai ) {
            auto3D32993D_ae = 3;
            auto3D32993D_ai = 1;
            lv_j = 1;
            for ( ; ( (auto3D32993D_ai >= 0 && lv_j <= auto3D32993D_ae) || (auto3D32993D_ai <= 0 && lv_j >= auto3D32993D_ae) ) ; lv_j += auto3D32993D_ai ) {
                DialogSetVisible(gv_playerBoxes[lv_i][lv_j], PlayerGroupSingle(EventPlayer()), true);
            }
        }
    }
    else if (auto8604688A_val == "debug novision") {
        VisRevealerDestroy(gv_debugrevealers[EventPlayer()]);
    }
    else if (auto8604688A_val == "debug vision") {
        VisRevealerCreate(EventPlayer(), RegionEntireMap());
        gv_debugrevealers[EventPlayer()] = VisRevealerLastCreated();
    }
    else if (auto8604688A_val == "debug hidegameui") {
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        DialogSetVisible(gv_tMPTPointsBoxes[1], PlayerGroupAll(), false);
        DialogSetVisible(gv_tMPTPointsBoxes[2], PlayerGroupAll(), false);
        DialogSetVisible(gv_tMPTMidBox, PlayerGroupAll(), false);
    }
    else if (auto8604688A_val == "debug showgameui") {
        libNtve_gf_HideGameUI(true, PlayerGroupAll());
        DialogSetVisible(gv_tMPTPointsBoxes[1], PlayerGroupAll(), true);
        DialogSetVisible(gv_tMPTPointsBoxes[2], PlayerGroupAll(), true);
        DialogSetVisible(gv_tMPTMidBox, PlayerGroupAll(), true);
    }
    else if (auto8604688A_val == "debug spawnoff") {
        TriggerEnable(gt_minionwaves, false);
    }
    else if (auto8604688A_val == "debug spawnon") {
        TriggerEnable(gt_minionwaves, true);
    }
    else if (auto8604688A_val == "debug cooldownoff") {
        TriggerEnable(gt_debugabilitycooldowns, true);
    }
    else if (auto8604688A_val == "debug cooldownon") {
        TriggerEnable(gt_debugabilitycooldowns, false);
    }
    else if (auto8604688A_val == "debug hostilecontrol") {
        libNtve_gf_SetAllianceOneWay(15, 2, 3);
    }
    else if (auto8604688A_val == "debug hostilecontroloff") {
        libNtve_gf_SetAllianceOneWay(15, 2, 5);
    }
    else if (auto8604688A_val == "debug damagekill") {
        UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitDamage(UnitFromId(41), "TurretDamage", UnitGroupLoopCurrent(), 10000.0);
        }
        UnitGroupLoopEnd();
    }
    else if (auto8604688A_val == "debug passive") {
        UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "DebugDisable", UnitGroupLoopCurrent(), 1);
        }
        UnitGroupLoopEnd();
    }
    else if (auto8604688A_val == "debug remove") {
        UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    else if (auto8604688A_val == "debug heal") {
        UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShieldsPercent, 100.0);
        }
        UnitGroupLoopEnd();
    }
    else if (auto8604688A_val == "debug invuln") {
        UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        }
        UnitGroupLoopEnd();
    }
    else if (auto8604688A_val == "debug noinvuln") {
        UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        }
        UnitGroupLoopEnd();
    }
    else if (auto8604688A_val == "debug giveunits") {
        UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetOwner(UnitGroupLoopCurrent(), EventPlayer(), true);
        }
        UnitGroupLoopEnd();
    }
    else if (auto8604688A_val == "debug givehostile") {
        UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetOwner(UnitGroupLoopCurrent(), 15, true);
        }
        UnitGroupLoopEnd();
    }
    else if (auto8604688A_val == "debug givewest") {
        UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetOwner(UnitGroupLoopCurrent(), 1, true);
        }
        UnitGroupLoopEnd();
    }
    else if (auto8604688A_val == "debug giveeast") {
        UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetOwner(UnitGroupLoopCurrent(), 5, true);
        }
        UnitGroupLoopEnd();
    }
    else if (auto8604688A_val == "debug silas") {
        UnitCreate(1, "SpyHero", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug herod") {
        UnitCreate(1, "Herod", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug bengura") {
        UnitCreate(1, "Bengura", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug kaine") {
        UnitCreate(1, "Kaine", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug thetorrasque") {
        UnitCreate(1, "TheTorrasque", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug ananias") {
        UnitCreate(1, "Ananias", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug fenix") {
        UnitCreate(1, "Fenix", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug melchior") {
        UnitCreate(1, "Melchior", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug damask") {
        UnitCreate(1, "Damask", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug jordan") {
        UnitCreate(1, "HeroRocketeer", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug niles") {
        UnitCreate(1, "Niles", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug brooke") {
        UnitCreate(1, "Brooke", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug rangedminion") {
        UnitCreate(1, "StalkerMinion", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug meleeminion") {
        UnitCreate(1, "ZealotMinion", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug siegeminion") {
        UnitCreate(1, "ImmortalMinion", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug rangedminions") {
        UnitCreate(10, "StalkerMinion", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug meleeminion") {
        UnitCreate(10, "ZealotMinion", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else if (auto8604688A_val == "debug siegeminions") {
        UnitCreate(10, "ImmortalMinion", 0, EventPlayer(), RegionGetCenter(RegionEntireMap()), 270.0);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E7513FA2"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BB67DFAE"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/43B5A129"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_debugoptions_Init () {
    gt_debugoptions = TriggerCreate("gt_debugoptions_Func");
    TriggerAddEventChatMessage(gt_debugoptions, c_playerAny, "debug", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: debug video mode
//--------------------------------------------------------------------------------------------------
bool gt_debugvideomode_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(gv_cCHSLTimer, true);
    TriggerExecute(gt_ChampSelectEnding, false, false);
    gf_RespawnBoxCreate();
    TriggerEnable(gt_PointDeathResponse, false);
    TriggerEnable(gt_debugabilitycooldowns, true);
    DialogSetVisible(gv_tMPTPointsBoxes[1], PlayerGroupAll(), false);
    DialogSetVisible(gv_tMPTPointsBoxes[2], PlayerGroupAll(), false);
    DialogSetVisible(gv_tMPTMidBox, PlayerGroupAll(), false);
    CameraPan(2, RegionGetCenter(RegionEntireMap()), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_debugvideomode_Init () {
    gt_debugvideomode = TriggerCreate("gt_debugvideomode_Func");
    TriggerAddEventTimeElapsed(gt_debugvideomode, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: debug ability cooldowns
//--------------------------------------------------------------------------------------------------
bool gt_debugabilitycooldowns_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityReset(EventUnit(), EventUnitAbility(), c_spendLocationAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_debugabilitycooldowns_Init () {
    gt_debugabilitycooldowns = TriggerCreate("gt_debugabilitycooldowns_Func");
    TriggerEnable(gt_debugabilitycooldowns, false);
    TriggerAddEventUnitAbility(gt_debugabilitycooldowns, null, null, c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon Limit
//--------------------------------------------------------------------------------------------------
bool gt_PylonLimit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_pylons;
    unit lv_newpylon;

    // Variable Initialization
    lv_pylons = UnitGroupEmpty();
    lv_newpylon = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Pylon2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, UnitGetOwner(EventUnitCreatedUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Pylon2")) {
            UnitGroupAdd(lv_pylons, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupRemove(lv_pylons, lv_newpylon);
    UnitGroupLoopBegin(lv_pylons);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PylonLimit_Init () {
    gt_PylonLimit = TriggerCreate("gt_PylonLimit_Func");
    TriggerAddEventUnitCreated(gt_PylonLimit, null, "LaunchPylon", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: reset bomb
//--------------------------------------------------------------------------------------------------
bool gt_resetbomb_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityReset(EventPlayerEffectUsedUnit(c_effectUnitCaster), AbilityCommand("Bomb", 0), c_spendLocationAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_resetbomb_Init () {
    gt_resetbomb = TriggerCreate("gt_resetbomb_Func");
    TriggerAddEventPlayerEffectUsed(gt_resetbomb, c_playerAny, "RhythmBombReset");
}

//--------------------------------------------------------------------------------------------------
// Trigger: reset snipe
//--------------------------------------------------------------------------------------------------
bool gt_resetsnipe_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityReset(EventPlayerEffectUsedUnit(c_effectUnitCaster), AbilityCommand("Snipe2", 0), c_spendLocationAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_resetsnipe_Init () {
    gt_resetsnipe = TriggerCreate("gt_resetsnipe_Func");
    TriggerAddEventPlayerEffectUsed(gt_resetsnipe, c_playerAny, "RhythmSnipeReset");
}

//--------------------------------------------------------------------------------------------------
// Trigger: reset dart
//--------------------------------------------------------------------------------------------------
bool gt_resetdart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityReset(EventPlayerEffectUsedUnit(c_effectUnitCaster), AbilityCommand("Dart", 0), c_spendLocationAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_resetdart_Init () {
    gt_resetdart = TriggerCreate("gt_resetdart_Func");
    TriggerAddEventPlayerEffectUsed(gt_resetdart, c_playerAny, "RhythmDartReset");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Summon roaches
//--------------------------------------------------------------------------------------------------
bool gt_Summonroaches_Func (bool testConds, bool runActions) {
    int autoCBB8FE81_ae;
    int autoCBB8FE81_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "NydusCanal2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCBB8FE81_ae = 3;
    autoCBB8FE81_ai = 1;
    lv_i = 1;
    for ( ; ( (autoCBB8FE81_ai >= 0 && lv_i <= autoCBB8FE81_ae) || (autoCBB8FE81_ai <= 0 && lv_i >= autoCBB8FE81_ae) ) ; lv_i += autoCBB8FE81_ai ) {
        UnitCreate(1, "Roach2", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnitCreatedUnit()), 270.0);
        UnitCreateEffectUnit(EventUnit(), "KillsToCaster", UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Summonroaches_Init () {
    gt_Summonroaches = TriggerCreate("gt_Summonroaches_Func");
    TriggerAddEventUnitCreated(gt_Summonroaches, null, "SummonNydusWorm", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: jammer minimap disable
//--------------------------------------------------------------------------------------------------
bool gt_jammerminimapdisable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_playersnominimap, EventPlayer());
    PlayerGroupRemove(gv_playerswithminimap, EventPlayer());
    UISetFrameVisible(gv_playersnominimap, c_syncFrameTypeMinimapPanel, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_jammerminimapdisable_Init () {
    gt_jammerminimapdisable = TriggerCreate("gt_jammerminimapdisable_Func");
    TriggerAddEventUnitBehaviorChange(gt_jammerminimapdisable, null, "Jammer", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: jammer minimap reenable
//--------------------------------------------------------------------------------------------------
bool gt_jammerminimapreenable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_reenableminimap;

    // Variable Initialization
    lv_reenableminimap = true;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "Jammer") == true)) {
            lv_reenableminimap = false;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_reenableminimap == true)) {
        PlayerGroupRemove(gv_playersnominimap, EventPlayer());
        PlayerGroupAdd(gv_playerswithminimap, EventPlayer());
        UISetFrameVisible(gv_playerswithminimap, c_syncFrameTypeMinimapPanel, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_jammerminimapreenable_Init () {
    gt_jammerminimapreenable = TriggerCreate("gt_jammerminimapreenable_Func");
    TriggerAddEventUnitBehaviorChange(gt_jammerminimapreenable, null, "Jammer", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: jammer reenable periodic check
//--------------------------------------------------------------------------------------------------
bool gt_jammerreenableperiodiccheck_Func (bool testConds, bool runActions) {
    int auto0E170A28_ae;
    int auto0E170A28_ai;

    // Variable Declarations
    bool lv_reenableminimap;
    int lv_i;

    // Variable Initialization
    lv_reenableminimap = true;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0E170A28_ae = 8;
    auto0E170A28_ai = 1;
    lv_i = 1;
    for ( ; ( (auto0E170A28_ai >= 0 && lv_i <= auto0E170A28_ae) || (auto0E170A28_ai <= 0 && lv_i >= auto0E170A28_ae) ) ; lv_i += auto0E170A28_ai ) {
        UnitGroupLoopBegin(UnitGroup(null, lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "Jammer") == true)) {
                lv_reenableminimap = false;
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        if ((lv_reenableminimap == true)) {
            PlayerGroupRemove(gv_playersnominimap, lv_i);
            PlayerGroupAdd(gv_playerswithminimap, lv_i);
            UISetFrameVisible(gv_playerswithminimap, c_syncFrameTypeMinimapPanel, true);
        }
        else {
        }
        lv_reenableminimap = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_jammerreenableperiodiccheck_Init () {
    gt_jammerreenableperiodiccheck = TriggerCreate("gt_jammerreenableperiodiccheck_Func");
    TriggerAddEventTimePeriodic(gt_jammerreenableperiodiccheck, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: longshock cooldown fix
//--------------------------------------------------------------------------------------------------
bool gt_longshockcooldownfix_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityReset(EventUnit(), AbilityCommand("Longshock", 0), c_spendLocationAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_longshockcooldownfix_Init () {
    gt_longshockcooldownfix = TriggerCreate("gt_longshockcooldownfix_Func");
    TriggerAddEventUnitAbility(gt_longshockcooldownfix, null, AbilityCommand("Longshock", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: purge
//--------------------------------------------------------------------------------------------------
bool gt_purge_Func (bool testConds, bool runActions) {
    int auto992B8659_ae;
    int auto992B8659_ai;

    // Variable Declarations
    int lv_beforebehaviorcount;
    int lv_afterbehaviorcount;
    int lv_difference;
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_beforebehaviorcount = UnitBehaviorCountAll(EventUnitTargetUnit());
    UnitBehaviorRemoveCategory(EventUnitTargetUnit(), c_unitBehaviorFlagTemporary);
    lv_afterbehaviorcount = UnitBehaviorCountAll(EventUnitTargetUnit());
    lv_difference = (lv_beforebehaviorcount - lv_afterbehaviorcount);
    if ((lv_difference >= 1)) {
        auto992B8659_ae = lv_difference;
        auto992B8659_ai = 1;
        lv_i = 1;
        for ( ; ( (auto992B8659_ai >= 0 && lv_i <= auto992B8659_ae) || (auto992B8659_ai <= 0 && lv_i >= auto992B8659_ae) ) ; lv_i += auto992B8659_ai ) {
            UnitCreateEffectUnit(EventUnit(), "PurgeBonusDamage", EventUnitTargetUnit());
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_purge_Init () {
    gt_purge = TriggerCreate("gt_purge_Func");
    TriggerAddEventUnitAbility(gt_purge, null, AbilityCommand("Purge", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: burrow cooldown
//--------------------------------------------------------------------------------------------------
bool gt_burrowcooldown_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityAddCooldown(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Burrow", "Abil/HerodiasBurrow", 7.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_burrowcooldown_Init () {
    gt_burrowcooldown = TriggerCreate("gt_burrowcooldown_Func");
    TriggerAddEventPlayerEffectUsed(gt_burrowcooldown, c_playerAny, "TunnelRemoveBurrow");
}

//--------------------------------------------------------------------------------------------------
// Trigger: limit to 1
//--------------------------------------------------------------------------------------------------
bool gt_limitto1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "RocketSentry"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((EventUnitCreatedUnit() != UnitGroupLoopCurrent()) && (UnitGetType(UnitGroupLoopCurrent()) == "RocketSentry")) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_limitto1_Init () {
    gt_limitto1 = TriggerCreate("gt_limitto1_Func");
    TriggerAddEventUnitCreated(gt_limitto1, null, "RocketSentry", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: takeoff vision height
//--------------------------------------------------------------------------------------------------
bool gt_takeoffvisionheight_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "HeroRocketeer", "VisionHeight", EventPlayer(), "4");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroRocketeer", "Mover", EventPlayer(), "GroundScaler");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_takeoffvisionheight_Init () {
    gt_takeoffvisionheight = TriggerCreate("gt_takeoffvisionheight_Func");
    TriggerAddEventUnitBehaviorChange(gt_takeoffvisionheight, null, "TakeoffControllerBehavior", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: takeoff vision height off
//--------------------------------------------------------------------------------------------------
bool gt_takeoffvisionheightoff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "HeroRocketeer", "VisionHeight", EventPlayer(), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroRocketeer", "Mover", EventPlayer(), "Ground");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_takeoffvisionheightoff_Init () {
    gt_takeoffvisionheightoff = TriggerCreate("gt_takeoffvisionheightoff_Func");
    TriggerAddEventUnitBehaviorChange(gt_takeoffvisionheightoff, null, "TakeoffControllerBehavior", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: screamer range default
//--------------------------------------------------------------------------------------------------
bool gt_screamerrangedefault_Func (bool testConds, bool runActions) {
    int autoDE2B19AD_ae;
    int autoDE2B19AD_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    autoDE2B19AD_ae = 8;
    autoDE2B19AD_ai = 1;
    lv_i = 1;
    for ( ; ( (autoDE2B19AD_ai >= 0 && lv_i <= autoDE2B19AD_ae) || (autoDE2B19AD_ai <= 0 && lv_i >= autoDE2B19AD_ae) ) ; lv_i += autoDE2B19AD_ai ) {
        gv_screamerrange[lv_i] = 9.0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_screamerrangedefault_Init () {
    gt_screamerrangedefault = TriggerCreate("gt_screamerrangedefault_Func");
    TriggerAddEventMapInit(gt_screamerrangedefault);
}

//--------------------------------------------------------------------------------------------------
// Trigger: screamer range increase
//--------------------------------------------------------------------------------------------------
bool gt_screamerrangeincrease_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_screamerrange[EventPlayer()] = (gv_screamerrange[EventPlayer()] + gv_screamerrangebonus);
    CatalogFieldValueSet(c_gameCatalogAbil, "Snapper2", "Range[" + IntToString(0) + "]", EventPlayer(), FixedToString(gv_screamerrange[EventPlayer()], c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_screamerrangeincrease_Init () {
    gt_screamerrangeincrease = TriggerCreate("gt_screamerrangeincrease_Func");
    TriggerAddEventUnitBehaviorChange(gt_screamerrangeincrease, null, "TakeoffHeightStacks", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: screamer range decrease
//--------------------------------------------------------------------------------------------------
bool gt_screamerrangedecrease_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_screamerrange[EventPlayer()] = (gv_screamerrange[EventPlayer()] - gv_screamerrangebonus);
    CatalogFieldValueSet(c_gameCatalogAbil, "Snapper2", "Range[" + IntToString(0) + "]", EventPlayer(), FixedToString(gv_screamerrange[EventPlayer()], c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_screamerrangedecrease_Init () {
    gt_screamerrangedecrease = TriggerCreate("gt_screamerrangedecrease_Func");
    TriggerAddEventUnitBehaviorChange(gt_screamerrangedecrease, null, "TakeoffHeightStacks", c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Repeater Lance Cooldown Reset
//--------------------------------------------------------------------------------------------------
bool gt_RepeaterLanceCooldownReset_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityReset(EventPlayerEffectUsedUnit(c_effectUnitCaster), AbilityCommand("RepeaterLance", 0), c_spendLocationAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RepeaterLanceCooldownReset_Init () {
    gt_RepeaterLanceCooldownReset = TriggerCreate("gt_RepeaterLanceCooldownReset_Func");
    TriggerAddEventPlayerEffectUsed(gt_RepeaterLanceCooldownReset, c_playerAny, "RepeaterLanceWildPower");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wild Power Changes
//--------------------------------------------------------------------------------------------------
bool gt_WildPowerChanges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_baserange;
    fixed lv_bonusrange;
    fixed lv_baseindicatorlength;
    fixed lv_bonusindicatorlength;
    fixed lv_basearea;
    fixed lv_bonusarea;
    fixed lv_basecd;
    fixed lv_bonuscd;

    // Variable Initialization
    lv_baserange = -8.5;
    lv_bonusrange = -1.0;
    lv_baseindicatorlength = 0.875;
    lv_bonusindicatorlength = 0.085;
    lv_basearea = 2.0;
    lv_bonusarea = -0.125;
    lv_basecd = 12.0;
    lv_bonuscd = 1.5;

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogReferenceSet("Effect,RepeaterLanceTargetPointOffset,InitialOffset", EventPlayer(), ("0," + FixedToString(((UnitBehaviorCount(EventUnit(), "WildPower") * lv_bonusrange) + lv_baserange), c_fixedPrecisionAny) + ",.25"));
    CatalogReferenceSet("Actor,RepeaterLanceSplat,Scale", EventPlayer(), ("1.000000," + FixedToString((lv_baseindicatorlength + (lv_bonusindicatorlength * (UnitBehaviorCount(EventUnit(), "WildPower") * 1.17))), 6) + ",1.000000"));
    CatalogReferenceSet("Effect,PsionicStormDummySearch,AreaArray[0].Radius", EventPlayer(), FixedToString((lv_basearea + (lv_bonusarea * UnitBehaviorCount(EventUnit(), "WildPower"))), c_fixedPrecisionAny));
    CatalogReferenceSet("Abil,RepeaterLance,Cost[0].Cooldown.TimeUse", EventPlayer(), (FixedToString(((UnitBehaviorCount(EventUnit(), "WildPower") * lv_bonuscd) + lv_basecd), c_fixedPrecisionAny)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WildPowerChanges_Init () {
    gt_WildPowerChanges = TriggerCreate("gt_WildPowerChanges_Func");
    TriggerAddEventUnitBehaviorChange(gt_WildPowerChanges, null, "WildPower", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wildfire Distance Calc
//--------------------------------------------------------------------------------------------------
bool gt_WildfireDistanceCalc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    bool lv_onmap;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((RegionContainsPoint(RegionEntireMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), lv_distance, UnitGetFacing(EventUnit()))) == true)) {
        lv_distance = (lv_distance + 0.1);
    }
    lv_distance = ((lv_distance * -1.0) + 0.1);
    CatalogReferenceSet("Effect,WildfireOffset,InitialOffset", EventPlayer(), ("0," + FixedToString(lv_distance, c_fixedPrecisionAny) + ",.25"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WildfireDistanceCalc_Init () {
    gt_WildfireDistanceCalc = TriggerCreate("gt_WildfireDistanceCalc_Func");
    TriggerAddEventUnitAbility(gt_WildfireDistanceCalc, null, AbilityCommand("Wildfire", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wildfire Launch
//--------------------------------------------------------------------------------------------------
bool gt_WildfireLaunch_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "WildfireWeapon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitBehaviorCount(EventUnit(), "WildPower") >= 1)) {
        UnitSetCustomValue(EventUnitCreatedUnit(), 0, (UnitGetCustomValue(EventUnitCreatedUnit(), 0) + 1.0));
        UnitBehaviorRemove(EventUnit(), "WildPower", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WildfireLaunch_Init () {
    gt_WildfireLaunch = TriggerCreate("gt_WildfireLaunch_Func");
    TriggerAddEventUnitCreated(gt_WildfireLaunch, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wildfire Impact
//--------------------------------------------------------------------------------------------------
bool gt_WildfireImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_stacks;
    fixed lv_basedamage;
    fixed lv_damage;

    // Variable Initialization
    lv_stacks = UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitSource), 0);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damage = ((CatalogFieldValueGetAsInt(c_gameCatalogEffect, "WildfireBonusDamage", "Amount", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) * lv_stacks) + 0.0);
    UnitDamage(EventPlayerEffectUsedUnit(c_effectUnitCaster), "WildfireDamage", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_damage);
    UnitKill(EventPlayerEffectUsedUnit(c_effectUnitSource));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WildfireImpact_Init () {
    gt_WildfireImpact = TriggerCreate("gt_WildfireImpact_Func");
    TriggerAddEventPlayerEffectUsed(gt_WildfireImpact, c_playerAny, "WildfireCollisionSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Momentum Preserver
//--------------------------------------------------------------------------------------------------
bool gt_MomentumPreserver_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDurationRemaining(EventUnit(), "Momentum", 1.2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MomentumPreserver_Init () {
    gt_MomentumPreserver = TriggerCreate("gt_MomentumPreserver_Func");
    TriggerAddEventUnitBehaviorChange(gt_MomentumPreserver, null, "MomentumController", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Again! Resets
//--------------------------------------------------------------------------------------------------
bool gt_AgainResets_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityReset(EventUnit(), AbilityCommand("GraviticStomp", 0), c_spendLocationAll);
    UnitAbilityReset(EventUnit(), AbilityCommand("CalledShot", 0), c_spendLocationAll);
    UnitAbilityReset(EventUnit(), AbilityCommand("Lunge", 0), c_spendLocationAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AgainResets_Init () {
    gt_AgainResets = TriggerCreate("gt_AgainResets_Func");
    TriggerAddEventUnitAbility(gt_AgainResets, null, AbilityCommand("Again", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disguise Deselect
//--------------------------------------------------------------------------------------------------
bool gt_DisguiseDeselect_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(EventUnit(), EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisguiseDeselect_Init () {
    gt_DisguiseDeselect = TriggerCreate("gt_DisguiseDeselect_Func");
    TriggerAddEventUnitAbility(gt_DisguiseDeselect, null, AbilityCommand("Disguise", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disguise Reselect
//--------------------------------------------------------------------------------------------------
bool gt_DisguiseReselect_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsSelected(EventUnit(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 1.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSelect(UnitGroupLoopCurrent(), UnitGetOwner(EventUnit()), true);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisguiseReselect_Init () {
    gt_DisguiseReselect = TriggerCreate("gt_DisguiseReselect_Func");
    TriggerAddEventUnitBehaviorChange(gt_DisguiseReselect, null, "DisguiseReplica", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disguise Recolor Minion Bars
//--------------------------------------------------------------------------------------------------
bool gt_DisguiseRecolorMinionBars_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(EventUnitTargetUnit(), EventPlayer(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
        CatalogFieldValueSet(c_gameCatalogActor, "StalkerMinion", "CustomUnitStatusFrame", EventPlayer(), "CustomMinionStatusBar\\DisguiseMinionStatus");
        CatalogFieldValueSet(c_gameCatalogActor, "ZealotMinion", "CustomUnitStatusFrame", EventPlayer(), "CustomMinionStatusBar\\DisguiseMinionStatus");
        CatalogFieldValueSet(c_gameCatalogActor, "ImmortalMinion", "CustomUnitStatusFrame", EventPlayer(), "CustomMinionStatusBar\\DisguiseMinionStatus");
    }
    else {
        CatalogFieldValueSet(c_gameCatalogActor, "StalkerMinion", "CustomUnitStatusFrame", EventPlayer(), "CustomMinionStatusBar\\MinionStatus");
        CatalogFieldValueSet(c_gameCatalogActor, "ZealotMinion", "CustomUnitStatusFrame", EventPlayer(), "CustomMinionStatusBar\\MinionStatus");
        CatalogFieldValueSet(c_gameCatalogActor, "ImmortalMinion", "CustomUnitStatusFrame", EventPlayer(), "CustomMinionStatusBar\\MinionStatus");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisguiseRecolorMinionBars_Init () {
    gt_DisguiseRecolorMinionBars = TriggerCreate("gt_DisguiseRecolorMinionBars_Func");
    TriggerAddEventUnitAbility(gt_DisguiseRecolorMinionBars, null, AbilityCommand("Disguise", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turret Behavior Fix
//--------------------------------------------------------------------------------------------------
bool gt_TurretBehaviorFix_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Turret"))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnitDamageSourceUnit(), "DisguiseMinionMods") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnitDamageSourceUnit()), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurretBehaviorFix_Init () {
    gt_TurretBehaviorFix = TriggerCreate("gt_TurretBehaviorFix_Func");
    TriggerAddEventUnitDamaged(gt_TurretBehaviorFix, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enforce Mine Counts
//--------------------------------------------------------------------------------------------------
bool gt_EnforceMineCounts_Func (bool testConds, bool runActions) {
    int autoC73314AD_ae;
    int autoC73314AD_ai;

    // Variable Declarations
    int lv_player;
    unitgroup lv_allmines;
    fixed lv_oldesttime;
    unit lv_oldestmine;
    int lv_i;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());
    lv_allmines = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventUnitCreatedUnit(), 0, GameGetMissionTime());
    UnitGroupLoopBegin(UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "RadarMine") || (UnitGetType(UnitGroupLoopCurrent()) == "RadarMineBurrowed"))) {
            UnitGroupAdd(lv_allmines, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    while ((UnitGroupCount(lv_allmines, c_unitCountAlive) > gv_maximumRadarMines)) {
        autoC73314AD_ae = UnitGroupCount(lv_allmines, c_unitCountAlive);
        autoC73314AD_ai = 1;
        lv_i = 1;
        for ( ; ( (autoC73314AD_ai >= 0 && lv_i <= autoC73314AD_ae) || (autoC73314AD_ai <= 0 && lv_i >= autoC73314AD_ae) ) ; lv_i += autoC73314AD_ai ) {
            if ((lv_i == 1)) {
                lv_oldesttime = UnitGetCustomValue(UnitGroupUnit(lv_allmines, 1), 0);
                lv_oldestmine = UnitGroupUnit(lv_allmines, 1);
            }
            else {
                if ((UnitGetCustomValue(UnitGroupUnit(lv_allmines, lv_i), 0) < lv_oldesttime)) {
                    lv_oldesttime = UnitGetCustomValue(UnitGroupUnit(lv_allmines, lv_i), 0);
                    lv_oldestmine = UnitGroupUnit(lv_allmines, lv_i);
                }
                else {
                }
            }
        }
        UnitGroupRemove(lv_allmines, lv_oldestmine);
        UnitKill(lv_oldestmine);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnforceMineCounts_Init () {
    gt_EnforceMineCounts = TriggerCreate("gt_EnforceMineCounts_Func");
    TriggerAddEventUnitCreated(gt_EnforceMineCounts, null, "UseRadarMine", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spy Cloak Cooldown Fix
//--------------------------------------------------------------------------------------------------
bool gt_SpyCloakCooldownFix_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityReset(EventUnit(), AbilityCommand("Cloak", 0), c_spendLocationAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpyCloakCooldownFix_Init () {
    gt_SpyCloakCooldownFix = TriggerCreate("gt_SpyCloakCooldownFix_Func");
    TriggerAddEventUnitAbility(gt_SpyCloakCooldownFix, null, AbilityCommand("Cloak", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cloak Charge Cost
//--------------------------------------------------------------------------------------------------
bool gt_CloakChargeCost_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityAddChargeUsed(EventUnit(), "Cloak", "Abil/SpyCloak", 15.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloakChargeCost_Init () {
    gt_CloakChargeCost = TriggerCreate("gt_CloakChargeCost_Func");
    TriggerAddEventUnitAbility(gt_CloakChargeCost, null, AbilityCommand("Cloak", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Forwarding
//--------------------------------------------------------------------------------------------------
bool gt_BasicForwarding_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, 1, RegionFromId(8), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "TopLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(104)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 1, RegionFromId(10), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "TopLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(107)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 1, RegionFromId(5), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "TopLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(108)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 1, RegionFromId(13), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "TopLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(100)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 1, RegionFromId(6), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "TopLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(105)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 1, RegionFromId(12), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "TopLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(110)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 1, RegionFromId(9), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "BotLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(97)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 1, RegionFromId(14), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "BotLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(99)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 1, RegionFromId(3), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "BotLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(101)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 1, RegionFromId(15), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "BotLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(100)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 1, RegionFromId(4), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "BotLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(98)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 1, RegionFromId(16), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "BotLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(102)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 5, RegionFromId(11), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "TopLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(105)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 5, RegionFromId(12), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "TopLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(106)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 5, RegionFromId(6), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "TopLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(108)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 5, RegionFromId(13), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "TopLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(99)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 5, RegionFromId(5), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "TopLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(104)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 5, RegionFromId(10), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "TopLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(109)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 5, RegionFromId(17), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "BotLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(98)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 5, RegionFromId(16), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "BotLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(100)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 5, RegionFromId(4), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "BotLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(101)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 5, RegionFromId(15), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "BotLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(99)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 5, RegionFromId(3), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "BotLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(97)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 5, RegionFromId(14), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "BotLaner") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(103)), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicForwarding_Init () {
    gt_BasicForwarding = TriggerCreate("gt_BasicForwarding_Func");
    TriggerAddEventTimePeriodic(gt_BasicForwarding, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: minion spawn point assignments
//--------------------------------------------------------------------------------------------------
bool gt_minionspawnpointassignments_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_minionSpawnPoints[1][1][1][1] = PointFromId(58);
    gv_minionSpawnPoints[1][1][1][2] = PointFromId(60);
    gv_minionSpawnPoints[1][1][1][3] = PointFromId(62);
    gv_minionSpawnPoints[1][1][2][1] = PointFromId(72);
    gv_minionSpawnPoints[1][1][2][2] = PointFromId(74);
    gv_minionSpawnPoints[1][1][2][3] = PointFromId(76);
    gv_minionSpawnPoints[1][2][1][1] = PointFromId(78);
    gv_minionSpawnPoints[1][2][1][2] = PointFromId(80);
    gv_minionSpawnPoints[1][2][1][3] = PointFromId(82);
    gv_minionSpawnPoints[1][2][2][1] = PointFromId(92);
    gv_minionSpawnPoints[1][2][2][2] = PointFromId(94);
    gv_minionSpawnPoints[1][2][2][3] = PointFromId(96);
    gv_minionSpawnPoints[2][1][1][1] = PointFromId(57);
    gv_minionSpawnPoints[2][1][1][2] = PointFromId(59);
    gv_minionSpawnPoints[2][1][1][3] = PointFromId(61);
    gv_minionSpawnPoints[2][1][2][1] = PointFromId(71);
    gv_minionSpawnPoints[2][1][2][2] = PointFromId(73);
    gv_minionSpawnPoints[2][1][2][3] = PointFromId(75);
    gv_minionSpawnPoints[2][2][1][1] = PointFromId(77);
    gv_minionSpawnPoints[2][2][1][2] = PointFromId(79);
    gv_minionSpawnPoints[2][2][1][3] = PointFromId(81);
    gv_minionSpawnPoints[2][2][2][1] = PointFromId(91);
    gv_minionSpawnPoints[2][2][2][2] = PointFromId(93);
    gv_minionSpawnPoints[2][2][2][3] = PointFromId(95);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_minionspawnpointassignments_Init () {
    gt_minionspawnpointassignments = TriggerCreate("gt_minionspawnpointassignments_Func");
    TriggerAddEventMapInit(gt_minionspawnpointassignments);
}

//--------------------------------------------------------------------------------------------------
// Trigger: minion waves
//--------------------------------------------------------------------------------------------------
bool gt_minionwaves_Func (bool testConds, bool runActions) {
    int auto5624998C_ae;
    int auto5624998C_ai;
    int auto80A978E4_ae;
    int auto80A978E4_ai;
    int autoCCB00F8E_ae;
    int autoCCB00F8E_ai;
    int autoE4818839_ae;
    int autoE4818839_ai;
    int auto0A6B1309_ae;
    int auto0A6B1309_ai;
    int auto0DB007A5_ae;
    int auto0DB007A5_ai;
    int auto973B12A6_ae;
    int auto973B12A6_ai;
    int autoDEA1511E_ae;
    int autoDEA1511E_ai;

    // Variable Declarations
    int lv_east_west;
    int lv_bot_top;
    int lv_melee_ranged;
    int lv_id;

    // Variable Initialization
    lv_east_west = 1;
    lv_bot_top = 1;
    lv_melee_ranged = 1;
    lv_id = 1;

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(UnitFromId(42)) == true) && (UnitIsAlive(UnitFromId(41)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5624998C_ae = 3;
    auto5624998C_ai = 1;
    lv_id = 1;
    for ( ; ( (auto5624998C_ai >= 0 && lv_id <= auto5624998C_ae) || (auto5624998C_ai <= 0 && lv_id >= auto5624998C_ae) ) ; lv_id += auto5624998C_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotMinion", 0, 5, gv_minionSpawnPoints[1][1][1][lv_id]);
        UnitBehaviorAdd(UnitLastCreated(), "BotLaner", UnitLastCreated(), 1);
    }
    auto80A978E4_ae = 3;
    auto80A978E4_ai = 1;
    lv_id = 1;
    for ( ; ( (auto80A978E4_ai >= 0 && lv_id <= auto80A978E4_ae) || (auto80A978E4_ai <= 0 && lv_id >= auto80A978E4_ae) ) ; lv_id += auto80A978E4_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotMinion", 0, 5, gv_minionSpawnPoints[1][2][1][lv_id]);
        UnitBehaviorAdd(UnitLastCreated(), "TopLaner", UnitLastCreated(), 1);
    }
    autoCCB00F8E_ae = 3;
    autoCCB00F8E_ai = 1;
    lv_id = 1;
    for ( ; ( (autoCCB00F8E_ai >= 0 && lv_id <= autoCCB00F8E_ae) || (autoCCB00F8E_ai <= 0 && lv_id >= autoCCB00F8E_ae) ) ; lv_id += autoCCB00F8E_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotMinion", 0, 1, gv_minionSpawnPoints[2][1][1][lv_id]);
        UnitBehaviorAdd(UnitLastCreated(), "BotLaner", UnitLastCreated(), 1);
    }
    autoE4818839_ae = 3;
    autoE4818839_ai = 1;
    lv_id = 1;
    for ( ; ( (autoE4818839_ai >= 0 && lv_id <= autoE4818839_ae) || (autoE4818839_ai <= 0 && lv_id >= autoE4818839_ae) ) ; lv_id += autoE4818839_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotMinion", 0, 1, gv_minionSpawnPoints[2][2][1][lv_id]);
        UnitBehaviorAdd(UnitLastCreated(), "TopLaner", UnitLastCreated(), 1);
    }
    auto0A6B1309_ae = 3;
    auto0A6B1309_ai = 1;
    lv_id = 1;
    for ( ; ( (auto0A6B1309_ai >= 0 && lv_id <= auto0A6B1309_ae) || (auto0A6B1309_ai <= 0 && lv_id >= auto0A6B1309_ae) ) ; lv_id += auto0A6B1309_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StalkerMinion", 0, 5, gv_minionSpawnPoints[1][1][2][lv_id]);
        UnitBehaviorAdd(UnitLastCreated(), "BotLaner", UnitLastCreated(), 1);
    }
    auto0DB007A5_ae = 3;
    auto0DB007A5_ai = 1;
    lv_id = 1;
    for ( ; ( (auto0DB007A5_ai >= 0 && lv_id <= auto0DB007A5_ae) || (auto0DB007A5_ai <= 0 && lv_id >= auto0DB007A5_ae) ) ; lv_id += auto0DB007A5_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StalkerMinion", 0, 5, gv_minionSpawnPoints[1][2][2][lv_id]);
        UnitBehaviorAdd(UnitLastCreated(), "TopLaner", UnitLastCreated(), 1);
    }
    auto973B12A6_ae = 3;
    auto973B12A6_ai = 1;
    lv_id = 1;
    for ( ; ( (auto973B12A6_ai >= 0 && lv_id <= auto973B12A6_ae) || (auto973B12A6_ai <= 0 && lv_id >= auto973B12A6_ae) ) ; lv_id += auto973B12A6_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StalkerMinion", 0, 1, gv_minionSpawnPoints[2][1][2][lv_id]);
        UnitBehaviorAdd(UnitLastCreated(), "BotLaner", UnitLastCreated(), 1);
    }
    autoDEA1511E_ae = 3;
    autoDEA1511E_ai = 1;
    lv_id = 1;
    for ( ; ( (autoDEA1511E_ai >= 0 && lv_id <= autoDEA1511E_ae) || (autoDEA1511E_ai <= 0 && lv_id >= autoDEA1511E_ae) ) ; lv_id += autoDEA1511E_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StalkerMinion", 0, 1, gv_minionSpawnPoints[2][2][2][lv_id]);
        UnitBehaviorAdd(UnitLastCreated(), "TopLaner", UnitLastCreated(), 1);
    }
    if ((gv_siegeMinionWaveCurrent == gv_siegeMinionInterval)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalMinion", 0, 1, PointFromId(209));
        UnitBehaviorAdd(UnitLastCreated(), "TopLaner", UnitLastCreated(), 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalMinion", 0, 5, PointFromId(210));
        UnitBehaviorAdd(UnitLastCreated(), "TopLaner", UnitLastCreated(), 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalMinion", 0, 1, PointFromId(467));
        UnitBehaviorAdd(UnitLastCreated(), "BotLaner", UnitLastCreated(), 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalMinion", 0, 5, PointFromId(468));
        UnitBehaviorAdd(UnitLastCreated(), "BotLaner", UnitLastCreated(), 1);
    }
    else {
    }
    if (gv_siegeMinionWaveCurrent >= 3) {
        gv_siegeMinionWaveCurrent = 1;
    }
    else {
        gv_siegeMinionWaveCurrent = gv_siegeMinionWaveCurrent + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_minionwaves_Init () {
    gt_minionwaves = TriggerCreate("gt_minionwaves_Func");
    TriggerEnable(gt_minionwaves, false);
    TriggerAddEventTimer(gt_minionwaves, gv_minionSpawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Jungle Spawn
//--------------------------------------------------------------------------------------------------
bool gt_InitialJungleSpawn_Func (bool testConds, bool runActions) {
    int autoB30546DA_ae;
    int autoB30546DA_ai;
    int auto74F417F7_ae;
    int auto74F417F7_ai;

    // Variable Declarations
    int lv_side;
    int lv_monster;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(gv_jungleInitialDelay, c_timeGame);
    autoB30546DA_ae = 2;
    autoB30546DA_ai = 1;
    lv_side = 1;
    for ( ; ( (autoB30546DA_ai >= 0 && lv_side <= autoB30546DA_ae) || (autoB30546DA_ai <= 0 && lv_side >= autoB30546DA_ae) ) ; lv_side += autoB30546DA_ai ) {
        auto74F417F7_ae = 4;
        auto74F417F7_ai = 1;
        lv_monster = 1;
        for ( ; ( (auto74F417F7_ai >= 0 && lv_monster <= auto74F417F7_ae) || (auto74F417F7_ai <= 0 && lv_monster >= auto74F417F7_ae) ) ; lv_monster += auto74F417F7_ai ) {
            UnitGroupAddUnitGroup(gv_jungleCamps[lv_side][lv_monster], gf_SpawnJungleCamp(lv_side, lv_monster));
        }
    }
    TriggerEnable(gt_MonsterUpgrades, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialJungleSpawn_Init () {
    gt_InitialJungleSpawn = TriggerCreate("gt_InitialJungleSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle Death Response
//--------------------------------------------------------------------------------------------------
bool gt_JungleDeathResponse_Func (bool testConds, bool runActions) {
    int autoE81C7362_ae;
    int autoE81C7362_ai;
    int auto6ECA73F3_ae;
    int auto6ECA73F3_ai;

    // Variable Declarations
    int lv_side;
    int lv_monster;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE81C7362_ae = 2;
    autoE81C7362_ai = 1;
    lv_side = 1;
    for ( ; ( (autoE81C7362_ai >= 0 && lv_side <= autoE81C7362_ae) || (autoE81C7362_ai <= 0 && lv_side >= autoE81C7362_ae) ) ; lv_side += autoE81C7362_ai ) {
        auto6ECA73F3_ae = 4;
        auto6ECA73F3_ai = 1;
        lv_monster = 1;
        for ( ; ( (auto6ECA73F3_ai >= 0 && lv_monster <= auto6ECA73F3_ae) || (auto6ECA73F3_ai <= 0 && lv_monster >= auto6ECA73F3_ae) ) ; lv_monster += auto6ECA73F3_ai ) {
            if ((UnitGroupHasUnit(gv_jungleCamps[lv_side][lv_monster], EventUnit()) == true)) {
                UnitGroupRemove(gv_jungleCamps[lv_side][lv_monster], EventUnit());
                gf_CheckJungleCamp(lv_side, lv_monster, UnitGetPosition(EventUnit()));
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JungleDeathResponse_Init () {
    gt_JungleDeathResponse = TriggerCreate("gt_JungleDeathResponse_Func");
    TriggerAddEventUnitDied(gt_JungleDeathResponse, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle Leash
//--------------------------------------------------------------------------------------------------
bool gt_JungleLeash_Func (bool testConds, bool runActions) {
    int auto7B5B510D_ae;
    int auto7B5B510D_ai;
    int auto2553678C_ae;
    int auto2553678C_ai;

    // Variable Declarations
    int lv_side;
    int lv_monster;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7B5B510D_ae = 2;
    auto7B5B510D_ai = 1;
    lv_side = 1;
    for ( ; ( (auto7B5B510D_ai >= 0 && lv_side <= auto7B5B510D_ae) || (auto7B5B510D_ai <= 0 && lv_side >= auto7B5B510D_ae) ) ; lv_side += auto7B5B510D_ai ) {
        auto2553678C_ae = 4;
        auto2553678C_ai = 1;
        lv_monster = 1;
        for ( ; ( (auto2553678C_ai >= 0 && lv_monster <= auto2553678C_ae) || (auto2553678C_ai <= 0 && lv_monster >= auto2553678C_ae) ) ; lv_monster += auto2553678C_ai ) {
            UnitGroupLoopBegin(gv_jungleCamps[lv_side][lv_monster]);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if (((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionCircle(libHots_gf_PointStoredForUnit(UnitGroupLoopCurrent(), 1), 6.0)) == false) || ((UnitHasBehavior(UnitGroupLoopCurrent(), "MonsterOutOfCombat") == true) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionCircle(libHots_gf_PointStoredForUnit(UnitGroupLoopCurrent(), 1), 0.2)) == false)))) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), libHots_gf_PointStoredForUnit(UnitGroupLoopCurrent(), 1)), c_orderQueueReplace);
                }
                else {
                }
            }
            UnitGroupLoopEnd();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JungleLeash_Init () {
    gt_JungleLeash = TriggerCreate("gt_JungleLeash_Func");
    TriggerAddEventTimePeriodic(gt_JungleLeash, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monster Upgrades
//--------------------------------------------------------------------------------------------------
bool gt_MonsterUpgrades_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(15, "MonsterUpgrade", c_techCountQueuedOrBetter) < 100)) {
        TechTreeUpgradeAddLevel(15, "MonsterUpgrade", 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MonsterUpgrades_Init () {
    gt_MonsterUpgrades = TriggerCreate("gt_MonsterUpgrades_Func");
    TriggerEnable(gt_MonsterUpgrades, false);
    TriggerAddEventTimer(gt_MonsterUpgrades, gv_monsterUpgradeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Point Death Response
//--------------------------------------------------------------------------------------------------
bool gt_PointDeathResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killerowner;
    int lv_points;

    // Variable Initialization
    lv_killerowner = UnitGetOwner(libNtve_gf_KillingUnit());
    lv_points = gf_GetPointValue(EventUnit(), libNtve_gf_KillingUnit(), lv_killerowner);

    // Conditions
    if (testConds) {
        if (!((lv_points != 0))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "DisguiseReplica") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killerowner = UnitGetOwner(libNtve_gf_KillingUnit());
    gf_CreatePointsTextTag(UnitGetPosition(EventUnit()), lv_killerowner, lv_points, EventUnit());
    if (((lv_killerowner == 1) || (PlayerGroupHasPlayer(gv_wESTTEAM, lv_killerowner) == true))) {
        gv_points[1] += lv_points;
    }
    else {
    }
    if (((lv_killerowner == 5) || (PlayerGroupHasPlayer(gv_eASTTEAM, lv_killerowner) == true))) {
        gv_points[2] += lv_points;
    }
    else {
    }
    TriggerExecute(gt_TeamPointsUpdateText, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PointDeathResponse_Init () {
    gt_PointDeathResponse = TriggerCreate("gt_PointDeathResponse_Func");
    TriggerAddEventUnitDied(gt_PointDeathResponse, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death Response
//--------------------------------------------------------------------------------------------------
bool gt_HeroDeathResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killerowner;
    int lv_points;

    // Variable Initialization
    lv_killerowner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_points = gf_GetPointValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedUnit(c_effectUnitTarget), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)));

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreatePointsTextTag(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_killerowner, lv_points, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    if (((lv_killerowner == 1) || (PlayerGroupHasPlayer(gv_wESTTEAM, lv_killerowner) == true))) {
        gv_points[1] += lv_points;
    }
    else {
    }
    if (((lv_killerowner == 5) || (PlayerGroupHasPlayer(gv_eASTTEAM, lv_killerowner) == true))) {
        gv_points[2] += lv_points;
    }
    else {
    }
    TriggerExecute(gt_TeamPointsUpdateText, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroDeathResponse_Init () {
    gt_HeroDeathResponse = TriggerCreate("gt_HeroDeathResponse_Func");
    TriggerAddEventPlayerEffectUsed(gt_HeroDeathResponse, c_playerAny, "ApplyFatalResponse");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Kill Tag
//--------------------------------------------------------------------------------------------------
bool gt_HeroKillTag_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), 0, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitDamageSourceUnit(), 0, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "DeathTag", EventUnitDamageSourceUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroKillTag_Init () {
    gt_HeroKillTag = TriggerCreate("gt_HeroKillTag_Func");
    TriggerAddEventUnitDamaged(gt_HeroKillTag, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Power Points
//--------------------------------------------------------------------------------------------------
bool gt_UpdatePowerPoints_Func (bool testConds, bool runActions) {
    unitgroup autoE54AB8BB_g;
    int autoE54AB8BB_u;
    unitgroup auto1A572A1C_g;
    int auto1A572A1C_u;
    playergroup auto00B6D248_g;
    int auto00B6D248_p;

    // Variable Declarations
    unit lv_updatechampion;
    int lv_updateplayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_powerPoints[1] = (gv_points[1] / 100);
    gv_powerPoints[2] = (gv_points[2] / 100);
    autoE54AB8BB_g = UnitGroupAlliance(1, c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), 0), 0);
    autoE54AB8BB_u = 1;
    for ( ; autoE54AB8BB_u <= UnitGroupCount(autoE54AB8BB_g, c_unitCountAll) ; autoE54AB8BB_u += BoolToInt(lv_updatechampion == UnitGroupUnit(autoE54AB8BB_g, autoE54AB8BB_u)) ) {
        lv_updatechampion = UnitGroupUnit(autoE54AB8BB_g, autoE54AB8BB_u);
        while ((gv_powerPoints[1] > UnitBehaviorCount(lv_updatechampion, "AddPowerPoints"))) {
            UnitBehaviorAdd(lv_updatechampion, "AddPowerPoints", lv_updatechampion, 1);
        }
    }
    auto1A572A1C_g = UnitGroupAlliance(5, c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), 0), 0);
    auto1A572A1C_u = 1;
    for ( ; auto1A572A1C_u <= UnitGroupCount(auto1A572A1C_g, c_unitCountAll) ; auto1A572A1C_u += BoolToInt(lv_updatechampion == UnitGroupUnit(auto1A572A1C_g, auto1A572A1C_u)) ) {
        lv_updatechampion = UnitGroupUnit(auto1A572A1C_g, auto1A572A1C_u);
        while ((gv_powerPoints[2] > UnitBehaviorCount(lv_updatechampion, "AddPowerPoints"))) {
            UnitBehaviorAdd(lv_updatechampion, "AddPowerPoints", lv_updatechampion, 1);
        }
    }
    auto00B6D248_g = gv_humanPlayers; 
    auto00B6D248_p = 1;
    for ( ; auto00B6D248_p <= PlayerGroupCount(auto00B6D248_g) ; auto00B6D248_p += BoolToInt(lv_updateplayer == PlayerGroupPlayer(auto00B6D248_g, auto00B6D248_p)) ) {
        lv_updateplayer = PlayerGroupPlayer(auto00B6D248_g, auto00B6D248_p);
        gf_UpdateallAPvalues(lv_updateplayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdatePowerPoints_Init () {
    gt_UpdatePowerPoints = TriggerCreate("gt_UpdatePowerPoints_Func");
    TriggerAddEventTimePeriodic(gt_UpdatePowerPoints, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: revealer init
//--------------------------------------------------------------------------------------------------
bool gt_revealerinit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/84D0CD99"), 24, RegionGetCenter(RegionFromId(26)), 1.0, true, true, PlayerGroupAll());
    gv_captureTextTag = TextTagLastCreated();
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 100.00));
    TextTagSetColor(TextTagLastCreated(), c_textTagColorBackground, ColorWithAlpha(0.00, 0.00, 0.00, 80.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_revealerinit_Init () {
    gt_revealerinit = TriggerCreate("gt_revealerinit_Func");
    TriggerAddEventMapInit(gt_revealerinit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: capture periodic
//--------------------------------------------------------------------------------------------------
bool gt_captureperiodic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_westteamheroes;
    unitgroup lv_eastteamheroes;
    int lv_herocount;
    fixed lv_watchtowerchange;

    // Variable Initialization
    lv_westteamheroes = UnitGroupAlliance(1, c_unitAllianceAlly, RegionFromId(26), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_eastteamheroes = UnitGroupAlliance(5, c_unitAllianceAlly, RegionFromId(26), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_herocount = (UnitGroupCount(lv_westteamheroes, c_unitCountAlive) - UnitGroupCount(lv_eastteamheroes, c_unitCountAlive));
    lv_watchtowerchange = (gv_watchtowercaptureconstant * lv_herocount);

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(26), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_herocount > 0) && (gv_watchtowercapturequantity < 100.0)) {
        if ((gv_watchtowercapturequantity < 0.0) && ((gv_watchtowercapturequantity + lv_watchtowerchange) >= 0.0)) {
            VisRevealerDestroy(gv_watchtowerRevealer);
            gv_revealerStatus = 0;
            UnitBehaviorRemove(UnitFromId(1715), "VisionTowerCaptured", 1);
            UnitSetOwner(UnitFromId(1715), 0, true);
        }
        else {
        }
        gv_watchtowercapturequantity += lv_watchtowerchange;
        if ((gv_watchtowercapturequantity > 100.0)) {
            gv_watchtowercapturequantity = 100.0;
        }
        else {
        }
    }
    else {
    }
    if ((lv_herocount < 0) && (gv_watchtowercapturequantity > -100.0)) {
        if ((gv_watchtowercapturequantity > 0.0) && ((gv_watchtowercapturequantity + lv_watchtowerchange) <= 0.0)) {
            VisRevealerDestroy(gv_watchtowerRevealer);
            gv_revealerStatus = 0;
            UnitBehaviorRemove(UnitFromId(1715), "VisionTowerCaptured", 1);
            UnitSetOwner(UnitFromId(1715), 0, true);
        }
        else {
        }
        gv_watchtowercapturequantity += (gv_watchtowercaptureconstant * lv_herocount);
        if ((gv_watchtowercapturequantity < -100.0)) {
            gv_watchtowercapturequantity = -100.0;
        }
        else {
        }
    }
    else {
    }
    TextTagSetText(gv_captureTextTag, (FixedToText(AbsF(gv_watchtowercapturequantity), 0) + StringExternal("Param/Value/670B3601")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_captureperiodic_Init () {
    gt_captureperiodic = TriggerCreate("gt_captureperiodic_Func");
    TriggerAddEventTimePeriodic(gt_captureperiodic, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: revealer periodic
//--------------------------------------------------------------------------------------------------
bool gt_revealerperiodic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_watchtowercapturequantity == 100.0) && (gv_revealerStatus != 1)) {
        if ((gv_watchtowerRevealer != null)) {
            VisRevealerDestroy(gv_watchtowerRevealer);
        }
        else {
        }
        VisRevealerCreate(1, RegionFromId(27));
        gv_watchtowerRevealer = VisRevealerLastCreated();
        gv_revealerStatus = 1;
        UnitBehaviorAdd(UnitFromId(1715), "VisionTowerCaptured", UnitFromId(1715), 1);
        UnitSetOwner(UnitFromId(1715), 1, true);
    }
    else {
    }
    if ((gv_watchtowercapturequantity == -100.0) && (gv_revealerStatus != 2)) {
        if ((gv_watchtowerRevealer != null)) {
            VisRevealerDestroy(gv_watchtowerRevealer);
        }
        else {
        }
        VisRevealerCreate(5, RegionFromId(27));
        gv_watchtowerRevealer = VisRevealerLastCreated();
        gv_revealerStatus = 2;
        UnitBehaviorAdd(UnitFromId(1715), "VisionTowerCaptured", UnitFromId(1715), 1);
        UnitSetOwner(UnitFromId(1715), 5, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_revealerperiodic_Init () {
    gt_revealerperiodic = TriggerCreate("gt_revealerperiodic_Func");
    TriggerAddEventTimePeriodic(gt_revealerperiodic, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: West Top Outer -> Inner
//--------------------------------------------------------------------------------------------------
bool gt_WestTopOuterInner_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(146), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WestTopOuterInner_Init () {
    gt_WestTopOuterInner = TriggerCreate("gt_WestTopOuterInner_Func");
    TriggerAddEventUnitDied(gt_WestTopOuterInner, UnitRefFromUnit(UnitFromId(39)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: West Top Inner -> Inhib T
//--------------------------------------------------------------------------------------------------
bool gt_WestTopInnerInhibT_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(31), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WestTopInnerInhibT_Init () {
    gt_WestTopInnerInhibT = TriggerCreate("gt_WestTopInnerInhibT_Func");
    TriggerAddEventUnitDied(gt_WestTopInnerInhibT, UnitRefFromUnit(UnitFromId(146)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: West Top Inhib T -> Inhib
//--------------------------------------------------------------------------------------------------
bool gt_WestTopInhibTInhib_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(86), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WestTopInhibTInhib_Init () {
    gt_WestTopInhibTInhib = TriggerCreate("gt_WestTopInhibTInhib_Func");
    TriggerAddEventUnitDied(gt_WestTopInhibTInhib, UnitRefFromUnit(UnitFromId(31)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: West Bot Outer -> Inner
//--------------------------------------------------------------------------------------------------
bool gt_WestBotOuterInner_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(67), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WestBotOuterInner_Init () {
    gt_WestBotOuterInner = TriggerCreate("gt_WestBotOuterInner_Func");
    TriggerAddEventUnitDied(gt_WestBotOuterInner, UnitRefFromUnit(UnitFromId(211)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: West Bot Inner -> Inhib T
//--------------------------------------------------------------------------------------------------
bool gt_WestBotInnerInhibT_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(69), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WestBotInnerInhibT_Init () {
    gt_WestBotInnerInhibT = TriggerCreate("gt_WestBotInnerInhibT_Func");
    TriggerAddEventUnitDied(gt_WestBotInnerInhibT, UnitRefFromUnit(UnitFromId(67)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: West Bot Inhib T -> Inhib
//--------------------------------------------------------------------------------------------------
bool gt_WestBotInhibTInhib_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(89), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WestBotInhibTInhib_Init () {
    gt_WestBotInhibTInhib = TriggerCreate("gt_WestBotInhibTInhib_Func");
    TriggerAddEventUnitDied(gt_WestBotInhibTInhib, UnitRefFromUnit(UnitFromId(69)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: West Inhibs -> Nexus T
//--------------------------------------------------------------------------------------------------
bool gt_WestInhibsNexusT_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(65), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WestInhibsNexusT_Init () {
    gt_WestInhibsNexusT = TriggerCreate("gt_WestInhibsNexusT_Func");
    TriggerAddEventUnitBehaviorChange(gt_WestInhibsNexusT, UnitRefFromUnit(UnitFromId(89)), "InhibitorDisabled", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt_WestInhibsNexusT, UnitRefFromUnit(UnitFromId(86)), "InhibitorDisabled", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: West Nexus T -> Nexus
//--------------------------------------------------------------------------------------------------
bool gt_WestNexusTNexus_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(42), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WestNexusTNexus_Init () {
    gt_WestNexusTNexus = TriggerCreate("gt_WestNexusTNexus_Func");
    TriggerAddEventUnitDied(gt_WestNexusTNexus, UnitRefFromUnit(UnitFromId(65)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: East Top Outer -> Inner
//--------------------------------------------------------------------------------------------------
bool gt_EastTopOuterInner_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(219), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EastTopOuterInner_Init () {
    gt_EastTopOuterInner = TriggerCreate("gt_EastTopOuterInner_Func");
    TriggerAddEventUnitDied(gt_EastTopOuterInner, UnitRefFromUnit(UnitFromId(40)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: East Top Inner -> Inhib T
//--------------------------------------------------------------------------------------------------
bool gt_EastTopInnerInhibT_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(32), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EastTopInnerInhibT_Init () {
    gt_EastTopInnerInhibT = TriggerCreate("gt_EastTopInnerInhibT_Func");
    TriggerAddEventUnitDied(gt_EastTopInnerInhibT, UnitRefFromUnit(UnitFromId(219)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: East Top Inhib T -> Inhib
//--------------------------------------------------------------------------------------------------
bool gt_EastTopInhibTInhib_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(85), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EastTopInhibTInhib_Init () {
    gt_EastTopInhibTInhib = TriggerCreate("gt_EastTopInhibTInhib_Func");
    TriggerAddEventUnitDied(gt_EastTopInhibTInhib, UnitRefFromUnit(UnitFromId(32)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: East Bot Outer -> Inner
//--------------------------------------------------------------------------------------------------
bool gt_EastBotOuterInner_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(68), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EastBotOuterInner_Init () {
    gt_EastBotOuterInner = TriggerCreate("gt_EastBotOuterInner_Func");
    TriggerAddEventUnitDied(gt_EastBotOuterInner, UnitRefFromUnit(UnitFromId(213)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: East Bot Inner -> Inhib T
//--------------------------------------------------------------------------------------------------
bool gt_EastBotInnerInhibT_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(70), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EastBotInnerInhibT_Init () {
    gt_EastBotInnerInhibT = TriggerCreate("gt_EastBotInnerInhibT_Func");
    TriggerAddEventUnitDied(gt_EastBotInnerInhibT, UnitRefFromUnit(UnitFromId(68)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: East Bot Inhib T -> Inhib
//--------------------------------------------------------------------------------------------------
bool gt_EastBotInhibTInhib_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(87), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EastBotInhibTInhib_Init () {
    gt_EastBotInhibTInhib = TriggerCreate("gt_EastBotInhibTInhib_Func");
    TriggerAddEventUnitDied(gt_EastBotInhibTInhib, UnitRefFromUnit(UnitFromId(70)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: East Inhibs -> Nexus T
//--------------------------------------------------------------------------------------------------
bool gt_EastInhibsNexusT_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(66), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EastInhibsNexusT_Init () {
    gt_EastInhibsNexusT = TriggerCreate("gt_EastInhibsNexusT_Func");
    TriggerAddEventUnitBehaviorChange(gt_EastInhibsNexusT, UnitRefFromUnit(UnitFromId(85)), "InhibitorDisabled", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt_EastInhibsNexusT, UnitRefFromUnit(UnitFromId(87)), "InhibitorDisabled", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: East Nexus T -> Nexus
//--------------------------------------------------------------------------------------------------
bool gt_EastNexusTNexus_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(41), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EastNexusTNexus_Init () {
    gt_EastNexusTNexus = TriggerCreate("gt_EastNexusTNexus_Func");
    TriggerAddEventUnitDied(gt_EastNexusTNexus, UnitRefFromUnit(UnitFromId(66)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: West Nexus dies
//--------------------------------------------------------------------------------------------------
bool gt_WestNexusdies_Func (bool testConds, bool runActions) {
    playergroup auto4CE25446_g;
    int auto4CE25446_p;
    playergroup auto1055FF82_g;
    int auto1055FF82_p;
    playergroup auto792A4601_g;
    int auto792A4601_p;

    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    auto4CE25446_g = PlayerGroupAll(); 
    auto4CE25446_p = 1;
    for ( ; auto4CE25446_p <= PlayerGroupCount(auto4CE25446_g) ; auto4CE25446_p += BoolToInt(lv_p == PlayerGroupPlayer(auto4CE25446_g, auto4CE25446_p)) ) {
        lv_p = PlayerGroupPlayer(auto4CE25446_g, auto4CE25446_p);
        CameraPan(lv_p, UnitGetPosition(EventUnit()), 1.0, -1, 20.0, false);
    }
    Wait(3.0, c_timeGame);
    auto1055FF82_g = gv_eASTTEAM; 
    auto1055FF82_p = 1;
    for ( ; auto1055FF82_p <= PlayerGroupCount(auto1055FF82_g) ; auto1055FF82_p += BoolToInt(lv_p == PlayerGroupPlayer(auto1055FF82_g, auto1055FF82_p)) ) {
        lv_p = PlayerGroupPlayer(auto1055FF82_g, auto1055FF82_p);
        GameOver(lv_p, c_gameOverVictory, true, true);
    }
    auto792A4601_g = gv_wESTTEAM; 
    auto792A4601_p = 1;
    for ( ; auto792A4601_p <= PlayerGroupCount(auto792A4601_g) ; auto792A4601_p += BoolToInt(lv_p == PlayerGroupPlayer(auto792A4601_g, auto792A4601_p)) ) {
        lv_p = PlayerGroupPlayer(auto792A4601_g, auto792A4601_p);
        GameOver(lv_p, c_gameOverDefeat, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WestNexusdies_Init () {
    gt_WestNexusdies = TriggerCreate("gt_WestNexusdies_Func");
    TriggerAddEventUnitDied(gt_WestNexusdies, UnitRefFromUnit(UnitFromId(42)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: East Nexus dies
//--------------------------------------------------------------------------------------------------
bool gt_EastNexusdies_Func (bool testConds, bool runActions) {
    playergroup autoDBFBCAEC_g;
    int autoDBFBCAEC_p;
    playergroup autoC97C5E76_g;
    int autoC97C5E76_p;
    playergroup auto620C01D8_g;
    int auto620C01D8_p;

    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    autoDBFBCAEC_g = PlayerGroupAll(); 
    autoDBFBCAEC_p = 1;
    for ( ; autoDBFBCAEC_p <= PlayerGroupCount(autoDBFBCAEC_g) ; autoDBFBCAEC_p += BoolToInt(lv_p == PlayerGroupPlayer(autoDBFBCAEC_g, autoDBFBCAEC_p)) ) {
        lv_p = PlayerGroupPlayer(autoDBFBCAEC_g, autoDBFBCAEC_p);
        CameraPan(lv_p, UnitGetPosition(EventUnit()), 1.0, -1, 20.0, false);
    }
    Wait(3.0, c_timeGame);
    autoC97C5E76_g = gv_wESTTEAM; 
    autoC97C5E76_p = 1;
    for ( ; autoC97C5E76_p <= PlayerGroupCount(autoC97C5E76_g) ; autoC97C5E76_p += BoolToInt(lv_p == PlayerGroupPlayer(autoC97C5E76_g, autoC97C5E76_p)) ) {
        lv_p = PlayerGroupPlayer(autoC97C5E76_g, autoC97C5E76_p);
        GameOver(lv_p, c_gameOverVictory, true, true);
    }
    auto620C01D8_g = gv_eASTTEAM; 
    auto620C01D8_p = 1;
    for ( ; auto620C01D8_p <= PlayerGroupCount(auto620C01D8_g) ; auto620C01D8_p += BoolToInt(lv_p == PlayerGroupPlayer(auto620C01D8_g, auto620C01D8_p)) ) {
        lv_p = PlayerGroupPlayer(auto620C01D8_g, auto620C01D8_p);
        GameOver(lv_p, c_gameOverDefeat, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EastNexusdies_Init () {
    gt_EastNexusdies = TriggerCreate("gt_EastNexusdies_Func");
    TriggerAddEventUnitDied(gt_EastNexusdies, UnitRefFromUnit(UnitFromId(41)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Increment Respawn Timer
//--------------------------------------------------------------------------------------------------
bool gt_IncrementRespawnTimer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_respawntimer < 75.0)) {
        gv_respawntimer += 1.0;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncrementRespawnTimer_Init () {
    gt_IncrementRespawnTimer = TriggerCreate("gt_IncrementRespawnTimer_Func");
    TriggerEnable(gt_IncrementRespawnTimer, false);
    TriggerAddEventTimePeriodic(gt_IncrementRespawnTimer, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Response Ingame
//--------------------------------------------------------------------------------------------------
bool gt_DeathResponseIngame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_champion;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_champion = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    UnitBehaviorSetDuration(lv_champion, "HeroFatalResponse", gv_respawntimer);
    Wait(2.0, c_timeGame);
    if ((libNtve_gf_PlayerIsEnemy(1, UnitGetOwner(lv_champion), 0) == true)) {
        UnitSetPosition(lv_champion, PointFromId(367), false);
    }
    else {
    }
    if ((libNtve_gf_PlayerIsEnemy(5, UnitGetOwner(lv_champion), 0) == true)) {
        UnitSetPosition(lv_champion, PointFromId(368), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeathResponseIngame_Init () {
    gt_DeathResponseIngame = TriggerCreate("gt_DeathResponseIngame_Func");
    TriggerAddEventPlayerEffectUsed(gt_DeathResponseIngame, c_playerAny, "ApplyFatalResponse");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Response UI
//--------------------------------------------------------------------------------------------------
bool gt_DeathResponseUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dyingchampionowner;

    // Variable Initialization
    lv_dyingchampionowner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));

    // Conditions
    if (testConds) {
        if (!(((EventPlayerEffectUsedUnit(c_effectUnitCaster) == gv_playerChampions[lv_dyingchampionowner])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_deadplayers, lv_dyingchampionowner);
    TimerStart(gv_rSPNTimers[lv_dyingchampionowner], gv_respawntimer, false, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_rSPNTimerNumberLabel, FixedToText(TimerGetRemaining(gv_rSPNTimers[lv_dyingchampionowner]), 0), PlayerGroupSingle(lv_dyingchampionowner));
    PlayerSetLighting(lv_dyingchampionowner, "StarshipDark", 1.0);
    DialogSetVisible(gv_rSPNBox, PlayerGroupSingle(lv_dyingchampionowner), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeathResponseUI_Init () {
    gt_DeathResponseUI = TriggerCreate("gt_DeathResponseUI_Func");
    TriggerAddEventPlayerEffectUsed(gt_DeathResponseUI, c_playerAny, "ApplyFatalResponse");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Box Text
//--------------------------------------------------------------------------------------------------
bool gt_UpdateBoxText_Func (bool testConds, bool runActions) {
    playergroup auto265BA5AE_g;
    int auto265BA5AE_p;

    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto265BA5AE_g = gv_deadplayers; 
    auto265BA5AE_p = 1;
    for ( ; auto265BA5AE_p <= PlayerGroupCount(auto265BA5AE_g) ; auto265BA5AE_p += BoolToInt(lv_p == PlayerGroupPlayer(auto265BA5AE_g, auto265BA5AE_p)) ) {
        lv_p = PlayerGroupPlayer(auto265BA5AE_g, auto265BA5AE_p);
        libNtve_gf_SetDialogItemText(gv_rSPNTimerNumberLabel, FixedToText(TimerGetRemaining(gv_rSPNTimers[lv_p]), 0), PlayerGroupSingle(lv_p));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateBoxText_Init () {
    gt_UpdateBoxText = TriggerCreate("gt_UpdateBoxText_Func");
    TriggerAddEventTimePeriodic(gt_UpdateBoxText, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Response
//--------------------------------------------------------------------------------------------------
bool gt_RespawnResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitowner;

    // Variable Initialization
    lv_unitowner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupRemove(gv_deadplayers, lv_unitowner);
    DialogSetVisible(gv_rSPNBox, PlayerGroupSingle(lv_unitowner), false);
    PlayerSetLighting(lv_unitowner, "Starship", 0.5);
    if ((PlayerGroupHasPlayer(gv_wESTTEAM, lv_unitowner) == true)) {
        CameraPan(lv_unitowner, PointFromId(367), 0.25, -1, 10.0, false);
    }
    else {
        CameraPan(lv_unitowner, PointFromId(368), 0.25, -1, 10.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnResponse_Init () {
    gt_RespawnResponse = TriggerCreate("gt_RespawnResponse_Func");
    TriggerAddEventUnitBehaviorChange(gt_RespawnResponse, null, "HeroFatalResponse", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Healing
//--------------------------------------------------------------------------------------------------
bool gt_PlatformHealing_Func (bool testConds, bool runActions) {
    unitgroup autoEF99C7F5_g;
    int autoEF99C7F5_u;
    unitgroup autoE02393FE_g;
    int autoE02393FE_u;

    // Variable Declarations
    unit lv_target;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoEF99C7F5_g = UnitGroupAlliance(1, c_unitAllianceAlly, RegionFromId(28), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEF99C7F5_u = 1;
    for ( ; autoEF99C7F5_u <= UnitGroupCount(autoEF99C7F5_g, c_unitCountAll) ; autoEF99C7F5_u += BoolToInt(lv_target == UnitGroupUnit(autoEF99C7F5_g, autoEF99C7F5_u)) ) {
        lv_target = UnitGroupUnit(autoEF99C7F5_g, autoEF99C7F5_u);
        UnitSetPropertyFixed(lv_target, c_unitPropLife, (UnitGetPropertyFixed(lv_target, c_unitPropLife, c_unitPropCurrent) + (UnitGetPropertyFixed(lv_target, c_unitPropLifeMax, c_unitPropCurrent) * gv_platformHealingCoefficient)));
    }
    autoE02393FE_g = UnitGroupAlliance(5, c_unitAllianceAlly, RegionFromId(29), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE02393FE_u = 1;
    for ( ; autoE02393FE_u <= UnitGroupCount(autoE02393FE_g, c_unitCountAll) ; autoE02393FE_u += BoolToInt(lv_target == UnitGroupUnit(autoE02393FE_g, autoE02393FE_u)) ) {
        lv_target = UnitGroupUnit(autoE02393FE_g, autoE02393FE_u);
        UnitSetPropertyFixed(lv_target, c_unitPropLife, (UnitGetPropertyFixed(lv_target, c_unitPropLife, c_unitPropCurrent) + (UnitGetPropertyFixed(lv_target, c_unitPropLifeMax, c_unitPropCurrent) * gv_platformHealingCoefficient)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformHealing_Init () {
    gt_PlatformHealing = TriggerCreate("gt_PlatformHealing_Func");
    TriggerAddEventTimePeriodic(gt_PlatformHealing, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Building Invulnerability
//--------------------------------------------------------------------------------------------------
bool gt_InitialBuildingInvulnerability_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(146), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(31), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(65), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(69), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(67), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(86), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(89), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(42), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(219), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(32), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(66), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(70), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(68), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(85), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(87), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(41), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialBuildingInvulnerability_Init () {
    gt_InitialBuildingInvulnerability = TriggerCreate("gt_InitialBuildingInvulnerability_Func");
    TriggerAddEventMapInit(gt_InitialBuildingInvulnerability);
}

//--------------------------------------------------------------------------------------------------
// Trigger: West Turret Behavior
//--------------------------------------------------------------------------------------------------
bool gt_WestTurretBehavior_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((EventUnit() != null))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitDamageSourceUnit(), 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, 1, RegionCircle(UnitGetPosition(EventUnitDamageSourceUnit()), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Turret")) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnitDamageSourceUnit()), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WestTurretBehavior_Init () {
    gt_WestTurretBehavior = TriggerCreate("gt_WestTurretBehavior_Func");
    TriggerAddEventUnitDamaged(gt_WestTurretBehavior, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: East Turret Behavior
//--------------------------------------------------------------------------------------------------
bool gt_EastTurretBehavior_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((EventUnit() != null))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitDamageSourceUnit(), 5, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 5, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, 5, RegionCircle(UnitGetPosition(EventUnitDamageSourceUnit()), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Turret")) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnitDamageSourceUnit()), c_orderQueueReplace);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EastTurretBehavior_Init () {
    gt_EastTurretBehavior = TriggerCreate("gt_EastTurretBehavior_Func");
    TriggerAddEventUnitDamaged(gt_EastTurretBehavior, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turret Death
//--------------------------------------------------------------------------------------------------
bool gt_TurretDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Turret"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "TurretDebris", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()), 270.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurretDeath_Init () {
    gt_TurretDeath = TriggerCreate("gt_TurretDeath_Func");
    TriggerAddEventUnitDied(gt_TurretDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion Upgrades
//--------------------------------------------------------------------------------------------------
bool gt_MinionUpgrades_Func (bool testConds, bool runActions) {
    playergroup auto2A955B33_g;
    int auto2A955B33_p;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_upgradeLevel < 100))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2A955B33_g = PlayerGroupAll(); 
    auto2A955B33_p = 1;
    for ( ; auto2A955B33_p <= PlayerGroupCount(auto2A955B33_g) ; auto2A955B33_p += BoolToInt(lv_i == PlayerGroupPlayer(auto2A955B33_g, auto2A955B33_p)) ) {
        lv_i = PlayerGroupPlayer(auto2A955B33_g, auto2A955B33_p);
        TechTreeUpgradeAddLevel(lv_i, "MinionUpgrade", 1);
    }
    gv_upgradeLevel += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinionUpgrades_Init () {
    gt_MinionUpgrades = TriggerCreate("gt_MinionUpgrades_Func");
    TriggerEnable(gt_MinionUpgrades, false);
    TriggerAddEventTimer(gt_MinionUpgrades, gv_minionUpgradeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Recall
//--------------------------------------------------------------------------------------------------
bool gt_Recall_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerIsEnemy(1, UnitGetOwner(EventUnit()), 0) == true)) {
        UnitSetPosition(EventUnit(), PointFromId(367), false);
    }
    else {
    }
    if ((libNtve_gf_PlayerIsEnemy(5, UnitGetOwner(EventUnit()), 0) == true)) {
        UnitSetPosition(EventUnit(), PointFromId(368), false);
    }
    else {
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Recall_Init () {
    gt_Recall = TriggerCreate("gt_Recall_Func");
    TriggerAddEventUnitAbility(gt_Recall, null, AbilityCommand("Recall", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Points Update Text
//--------------------------------------------------------------------------------------------------
bool gt_TeamPointsUpdateText_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_tMPTPointBoxLabels[1], StringToText(gf_ConvertIntegerToStringWithCommas(gv_points[1])), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_tMPTPointBoxLabels[2], StringToText(gf_ConvertIntegerToStringWithCommas(gv_points[2])), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeamPointsUpdateText_Init () {
    gt_TeamPointsUpdateText = TriggerCreate("gt_TeamPointsUpdateText_Func");
    TriggerEnable(gt_TeamPointsUpdateText, false);
    TriggerAddEventTimePeriodic(gt_TeamPointsUpdateText, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Button Response
//--------------------------------------------------------------------------------------------------
bool gt_HeroButtonResponse_Func (bool testConds, bool runActions) {
    int auto32658DBD_ae;
    int auto32658DBD_ai;

    // Variable Declarations
    int lv_buttonID;
    int lv_i;

    // Variable Initialization
    lv_buttonID = gf_DialogItemtoHeroButtonID(EventDialogControl());

    // Conditions
    if (testConds) {
        if (!((lv_buttonID > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerViewBoxID[EventPlayer()] > 0)) {
        DialogControlSetEnabled(gv_heroButtons[gv_playerViewBoxID[EventPlayer()]], PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), true);
        DialogControlSetEnabled(gv_heroButtons[gv_playerViewBoxID[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
    }
    else {
    }
    DialogControlSetEnabled(gv_lockinButton, PlayerGroupSingle(EventPlayer()), true);
    gv_playerViewBoxID[EventPlayer()] = lv_buttonID;
    DialogControlSetVisible(gv_playerPortraitImage[gf_PlayerNumbertoPlayerTeam(EventPlayer())][gf_PlayerNumbertoPlayerTeamIndex(EventPlayer())], PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), true);
    DialogControlSetVisible(gv_playerPortraitImage[gf_PlayerNumbertoPlayerTeam(EventPlayer())][gf_PlayerNumbertoPlayerTeamIndex(EventPlayer())], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_playerPortraitImage[gf_PlayerNumbertoPlayerTeam(EventPlayer())][gf_PlayerNumbertoPlayerTeamIndex(EventPlayer())], gv_heroButtonRecords[lv_buttonID].lv_icon, PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()));
    libNtve_gf_SetDialogItemImage(gv_playerPortraitImage[gf_PlayerNumbertoPlayerTeam(EventPlayer())][gf_PlayerNumbertoPlayerTeamIndex(EventPlayer())], gv_heroButtonRecords[lv_buttonID].lv_icon, PlayerGroupSingle(EventPlayer()));
    DialogControlSetEnabled(gv_heroButtons[lv_buttonID], PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), false);
    DialogControlSetEnabled(gv_heroButtons[lv_buttonID], PlayerGroupSingle(EventPlayer()), false);
    auto32658DBD_ae = 5;
    auto32658DBD_ai = 1;
    lv_i = 1;
    for ( ; ( (auto32658DBD_ai >= 0 && lv_i <= auto32658DBD_ae) || (auto32658DBD_ai <= 0 && lv_i >= auto32658DBD_ae) ) ; lv_i += auto32658DBD_ai ) {
        libNtve_gf_SetDialogItemImage(gv_heroAbilityButtonIcons[lv_i], gv_abilityButton[lv_buttonID][lv_i].lv_abilityIcon, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_heroAbilityButtons[lv_i], (gv_abilityButton[lv_buttonID][lv_i].lv_abilityName + StringExternal("Param/Value/6650ED3F") + gv_abilityButton[lv_buttonID][lv_i].lv_abilityTooltip), PlayerGroupSingle(EventPlayer()));
    }
    DialogControlSetVisible(gv_heroModelItem, PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemCamera(gv_heroModelItem, gv_heroButtonRecords[lv_buttonID].lv_previewCamera, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemUnitLink(gv_heroModelItem, gv_heroButtonRecords[lv_buttonID].lv_previewUnitType, PlayerGroupSingle(EventPlayer()));
    DialogControlSetVisible(gv_heroModelItem, PlayerGroupSingle(EventPlayer()), true);
    gv_playerChampionTypes[EventPlayer()] = gv_heroButtonRecords[lv_buttonID].lv_hero;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroButtonResponse_Init () {
    gt_HeroButtonResponse = TriggerCreate("gt_HeroButtonResponse_Func");
    TriggerAddEventDialogControl(gt_HeroButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lockin Button Response
//--------------------------------------------------------------------------------------------------
bool gt_LockinButtonResponse_Func (bool testConds, bool runActions) {
    int auto4D4DA8AE_ae;
    int auto4D4DA8AE_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_lockinButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Terran_BuildingPlacement", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    SoundPlay(SoundLink("Alert_UniObjectiveCompleted", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    auto4D4DA8AE_ae = gv_cHSLnHeroButtons;
    auto4D4DA8AE_ai = 1;
    lv_i = 1;
    for ( ; ( (auto4D4DA8AE_ai >= 0 && lv_i <= auto4D4DA8AE_ae) || (auto4D4DA8AE_ai <= 0 && lv_i >= auto4D4DA8AE_ae) ) ; lv_i += auto4D4DA8AE_ai ) {
        DialogControlSetEnabled(gv_heroButtons[lv_i], PlayerGroupSingle(EventPlayer()), false);
        DialogControlFadeTransparency(gv_heroButtons[lv_i], PlayerGroupSingle(EventPlayer()), 0.25, 50.0);
        DialogControlFadeTransparency(gv_heroIcons[lv_i], PlayerGroupSingle(EventPlayer()), 0.25, 50.0);
    }
    DialogControlSetEnabled(gv_lockinButton, PlayerGroupSingle(EventPlayer()), false);
    DialogSetTransparency(gv_playerBoxes[gf_PlayerNumbertoPlayerTeam(EventPlayer())][gf_PlayerNumbertoPlayerTeamIndex(EventPlayer())], 0.0);
    DialogControlSetVisible(gv_playerPortraitCheckmark[gf_PlayerNumbertoPlayerTeam(EventPlayer())][gf_PlayerNumbertoPlayerTeamIndex(EventPlayer())], PlayerGroupAll(), true);
    DialogControlFadeTransparency(gv_playerPortraitCheckmark[gf_PlayerNumbertoPlayerTeam(EventPlayer())][gf_PlayerNumbertoPlayerTeamIndex(EventPlayer())], PlayerGroupAll(), 0.25, 30.0);
    libNtve_gf_SetDialogItemDesaturated(gv_playerBoxBackgrounds[gf_PlayerNumbertoPlayerTeam(EventPlayer())][gf_PlayerNumbertoPlayerTeamIndex(EventPlayer())], true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(gv_playerBoxBackgrounds[gf_PlayerNumbertoPlayerTeam(EventPlayer())][gf_PlayerNumbertoPlayerTeamIndex(EventPlayer())], Color(20*100/255,134*100/255,107*100/255), PlayerGroupAll());
    gv_numLockedInPlayers += 1;
    if ((gv_numLockedInPlayers == PlayerGroupCount(gv_humanPlayers)) && (TimerGetRemaining(gv_cCHSLTimer) > gv_cCHSLTimerShortDuration)) {
        TimerStart(gv_cCHSLTimer, gv_cCHSLTimerShortDuration, false, c_timeGame);
        SoundPlay(SoundLink("UI_ArcadeSelect", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LockinButtonResponse_Init () {
    gt_LockinButtonResponse = TriggerCreate("gt_LockinButtonResponse_Func");
    TriggerAddEventDialogControl(gt_LockinButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update CHSL Timer
//--------------------------------------------------------------------------------------------------
bool gt_UpdateCHSLTimer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_timerLabel, TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetRemaining(gv_cCHSLTimer))), PlayerGroupAll());
    if ((FixedToInt(TimerGetRemaining(gv_cCHSLTimer)) == gv_cCHSLTimerBeepstart) && (gv_cCHSLTimerBeepstarted == false)) {
        gv_cCHSLTimerBeepstarted = true;
        TriggerExecute(gt_TimerBeeps, true, false);
    }
    else {
    }
    if ((TimerGetRemaining(gv_cCHSLTimer) == 0.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateCHSLTimer_Init () {
    gt_UpdateCHSLTimer = TriggerCreate("gt_UpdateCHSLTimer_Func");
    TriggerAddEventTimePeriodic(gt_UpdateCHSLTimer, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Beeps
//--------------------------------------------------------------------------------------------------
bool gt_TimerBeeps_Func (bool testConds, bool runActions) {
    int auto556084FE_ae;
    int auto556084FE_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_BnetCountdown", -1), PlayerGroupAll(), 100.0, 0.0);
    auto556084FE_ae = (gv_cCHSLTimerBeepstart - 1);
    auto556084FE_ai = 1;
    lv_i = 1;
    for ( ; ( (auto556084FE_ai >= 0 && lv_i <= auto556084FE_ae) || (auto556084FE_ai <= 0 && lv_i >= auto556084FE_ae) ) ; lv_i += auto556084FE_ai ) {
        Wait(1.0, c_timeGame);
        SoundPlay(SoundLink("UI_BnetCountdown", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerBeeps_Init () {
    gt_TimerBeeps = TriggerCreate("gt_TimerBeeps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Initialization
//--------------------------------------------------------------------------------------------------
bool gt_GameInitialization_Func (bool testConds, bool runActions) {
    playergroup auto034A53DB_g;
    int auto034A53DB_p;
    playergroup auto017B2E38_g;
    int auto017B2E38_p;
    playergroup autoF50817D2_g;
    int autoF50817D2_p;
    playergroup autoBFDD4F89_g;
    int autoBFDD4F89_p;
    playergroup autoEDBB6115_g;
    int autoEDBB6115_p;
    playergroup auto5CFF7CB0_g;
    int auto5CFF7CB0_p;

    // Variable Declarations
    int lv_i;
    int lv_k;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    gf_HideSCUI();
    PlayerGroupRemove(gv_wESTTEAM, 1);
    PlayerGroupRemove(gv_eASTTEAM, 5);
    auto034A53DB_g = gv_wESTTEAM; 
    auto034A53DB_p = 1;
    for ( ; auto034A53DB_p <= PlayerGroupCount(auto034A53DB_g) ; auto034A53DB_p += BoolToInt(lv_i == PlayerGroupPlayer(auto034A53DB_g, auto034A53DB_p)) ) {
        lv_i = PlayerGroupPlayer(auto034A53DB_g, auto034A53DB_p);
        libNtve_gf_SetAlliance(1, lv_i, 1);
    }
    auto017B2E38_g = gv_eASTTEAM; 
    auto017B2E38_p = 1;
    for ( ; auto017B2E38_p <= PlayerGroupCount(auto017B2E38_g) ; auto017B2E38_p += BoolToInt(lv_i == PlayerGroupPlayer(auto017B2E38_g, auto017B2E38_p)) ) {
        lv_i = PlayerGroupPlayer(auto017B2E38_g, auto017B2E38_p);
        libNtve_gf_SetAlliance(5, lv_i, 1);
    }
    libNtve_gf_SetPlayerGroupAlliance(gv_wESTTEAM, 1);
    libNtve_gf_SetPlayerGroupAlliance(gv_eASTTEAM, 1);
    autoF50817D2_g = gv_wESTTEAM; 
    autoF50817D2_p = 1;
    for ( ; autoF50817D2_p <= PlayerGroupCount(autoF50817D2_g) ; autoF50817D2_p += BoolToInt(lv_i == PlayerGroupPlayer(autoF50817D2_g, autoF50817D2_p)) ) {
        lv_i = PlayerGroupPlayer(autoF50817D2_g, autoF50817D2_p);
        autoBFDD4F89_g = gv_eASTTEAM; 
        autoBFDD4F89_p = 1;
        for ( ; autoBFDD4F89_p <= PlayerGroupCount(autoBFDD4F89_g) ; autoBFDD4F89_p += BoolToInt(lv_k == PlayerGroupPlayer(autoBFDD4F89_g, autoBFDD4F89_p)) ) {
            lv_k = PlayerGroupPlayer(autoBFDD4F89_g, autoBFDD4F89_p);
            libNtve_gf_SetAllianceOneWay(lv_i, lv_k, 5);
            PlayerSetAlliance(lv_i, c_allianceIdPushable, lv_k, false);
        }
    }
    autoEDBB6115_g = gv_eASTTEAM; 
    autoEDBB6115_p = 1;
    for ( ; autoEDBB6115_p <= PlayerGroupCount(autoEDBB6115_g) ; autoEDBB6115_p += BoolToInt(lv_k == PlayerGroupPlayer(autoEDBB6115_g, autoEDBB6115_p)) ) {
        lv_k = PlayerGroupPlayer(autoEDBB6115_g, autoEDBB6115_p);
        auto5CFF7CB0_g = gv_wESTTEAM; 
        auto5CFF7CB0_p = 1;
        for ( ; auto5CFF7CB0_p <= PlayerGroupCount(auto5CFF7CB0_g) ; auto5CFF7CB0_p += BoolToInt(lv_i == PlayerGroupPlayer(auto5CFF7CB0_g, auto5CFF7CB0_p)) ) {
            lv_i = PlayerGroupPlayer(auto5CFF7CB0_g, auto5CFF7CB0_p);
            libNtve_gf_SetAllianceOneWay(lv_k, lv_i, 5);
            PlayerSetAlliance(lv_k, c_allianceIdPushable, lv_i, false);
        }
    }
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    gf_InitializeHeroButtons();
    gf_ChampionSelectDialogCreate();
    gf_BeginCHSLTimer();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameInitialization_Init () {
    gt_GameInitialization = TriggerCreate("gt_GameInitialization_Func");
    TriggerAddEventMapInit(gt_GameInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Champ Select Ending
//--------------------------------------------------------------------------------------------------
bool gt_ChampSelectEnding_Func (bool testConds, bool runActions) {
    playergroup auto8B5E1C34_g;
    int auto8B5E1C34_p;
    playergroup auto53BB1605_g;
    int auto53BB1605_p;
    int auto3F50F3E3_ae;
    int auto3F50F3E3_ai;
    int autoCAE6C6F2_ae;
    int autoCAE6C6F2_ai;
    playergroup auto605EB1AC_g;
    int auto605EB1AC_p;

    // Variable Declarations
    int lv_p;
    int lv_q;
    int lv_r;
    bool lv_champusable;

    // Variable Initialization
    lv_champusable = true;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8B5E1C34_g = gv_humanPlayers; 
    auto8B5E1C34_p = 1;
    for ( ; auto8B5E1C34_p <= PlayerGroupCount(auto8B5E1C34_g) ; auto8B5E1C34_p += BoolToInt(lv_p == PlayerGroupPlayer(auto8B5E1C34_g, auto8B5E1C34_p)) ) {
        lv_p = PlayerGroupPlayer(auto8B5E1C34_g, auto8B5E1C34_p);
        while ((gv_playerChampionTypes[lv_p] == null)) {
            lv_r = RandomInt(1, 12);
            auto53BB1605_g = PlayerGroupAlliance(c_playerGroupAlly, lv_p); 
            auto53BB1605_p = 1;
            for ( ; auto53BB1605_p <= PlayerGroupCount(auto53BB1605_g) ; auto53BB1605_p += BoolToInt(lv_q == PlayerGroupPlayer(auto53BB1605_g, auto53BB1605_p)) ) {
                lv_q = PlayerGroupPlayer(auto53BB1605_g, auto53BB1605_p);
                if ((gv_heroButtonRecords[lv_r].lv_hero == gv_playerChampionTypes[lv_q])) {
                    lv_champusable = false;
                }
                else {
                }
            }
            if ((lv_champusable == true)) {
                gv_playerChampionTypes[lv_p] = gv_heroButtonRecords[lv_r].lv_hero;
            }
            else {
            }
        }
    }
    DialogSetVisible(gv_championSelect, PlayerGroupAll(), false);
    DialogSetVisible(gv_heroModelDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_timerDialog, PlayerGroupAll(), false);
    auto3F50F3E3_ae = 2;
    auto3F50F3E3_ai = 1;
    lv_p = 1;
    for ( ; ( (auto3F50F3E3_ai >= 0 && lv_p <= auto3F50F3E3_ae) || (auto3F50F3E3_ai <= 0 && lv_p >= auto3F50F3E3_ae) ) ; lv_p += auto3F50F3E3_ai ) {
        autoCAE6C6F2_ae = 3;
        autoCAE6C6F2_ai = 1;
        lv_q = 1;
        for ( ; ( (autoCAE6C6F2_ai >= 0 && lv_q <= autoCAE6C6F2_ae) || (autoCAE6C6F2_ai <= 0 && lv_q >= autoCAE6C6F2_ae) ) ; lv_q += autoCAE6C6F2_ai ) {
            DialogSetVisible(gv_playerBoxes[lv_p][lv_q], PlayerGroupAll(), false);
        }
    }
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    auto605EB1AC_g = PlayerGroupAll(); 
    auto605EB1AC_p = 1;
    for ( ; auto605EB1AC_p <= PlayerGroupCount(auto605EB1AC_g) ; auto605EB1AC_p += BoolToInt(lv_p == PlayerGroupPlayer(auto605EB1AC_g, auto605EB1AC_p)) ) {
        lv_p = PlayerGroupPlayer(auto605EB1AC_g, auto605EB1AC_p);
        if ((PlayerGroupHasPlayer(gv_wESTTEAM, lv_p) == true)) {
            CameraPan(lv_p, PointFromId(367), 0.0, -1, 10.0, false);
            libNtve_gf_UnitCreateFacingPoint(1, gv_playerChampionTypes[lv_p], 0, lv_p, gv_westteamspawnpoints[gf_PlayerNumbertoPlayerTeamIndex(lv_p)], PointFromId(367));
            gv_playerChampions[lv_p] = UnitLastCreated();
            UnitSelect(gv_playerChampions[lv_p], lv_p, true);
            UnitControlGroupAddUnit(lv_p, 1, gv_playerChampions[lv_p]);
        }
        else {
            if ((PlayerGroupHasPlayer(gv_eASTTEAM, lv_p) == true)) {
                CameraPan(lv_p, PointFromId(368), 0.0, -1, 10.0, false);
                libNtve_gf_UnitCreateFacingPoint(1, gv_playerChampionTypes[lv_p], 0, lv_p, gv_eastteamspawnpoints[gf_PlayerNumbertoPlayerTeamIndex(lv_p)], PointFromId(368));
                gv_playerChampions[lv_p] = UnitLastCreated();
                UnitSelect(gv_playerChampions[lv_p], lv_p, true);
                UnitControlGroupAddUnit(lv_p, 1, gv_playerChampions[lv_p]);
            }
            else {
            }
        }
        CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    }
    gf_TeamPointsDialogsCreate();
    gf_RespawnBoxCreate();
    TimerStart(gv_minionSpawnTimer, gv_minionSpawnInterval, true, c_timeGame);
    TimerStart(gv_minionUpgradeTimer, gv_minionUpgradeInterval, true, c_timeGame);
    TimerStart(gv_monsterUpgradeTimer, gv_monsterUpgradeInterval, true, c_timeGame);
    TriggerEnable(gt_minionwaves, true);
    TriggerEnable(gt_MinionUpgrades, true);
    TriggerEnable(gt_IncrementRespawnTimer, true);
    TriggerExecute(gt_InitialJungleSpawn, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChampSelectEnding_Init () {
    gt_ChampSelectEnding = TriggerCreate("gt_ChampSelectEnding_Func");
    TriggerAddEventTimer(gt_ChampSelectEnding, gv_cCHSLTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_InitializeHumanPlayersGroup_Init();
    gt_InitializeSpawnPoints_Init();
    gt_effecttargetdebugging_Init();
    gt_debugoptions_Init();
    gt_debugvideomode_Init();
    gt_debugabilitycooldowns_Init();
    gt_PylonLimit_Init();
    gt_resetbomb_Init();
    gt_resetsnipe_Init();
    gt_resetdart_Init();
    gt_Summonroaches_Init();
    gt_jammerminimapdisable_Init();
    gt_jammerminimapreenable_Init();
    gt_jammerreenableperiodiccheck_Init();
    gt_longshockcooldownfix_Init();
    gt_purge_Init();
    gt_burrowcooldown_Init();
    gt_limitto1_Init();
    gt_takeoffvisionheight_Init();
    gt_takeoffvisionheightoff_Init();
    gt_screamerrangedefault_Init();
    gt_screamerrangeincrease_Init();
    gt_screamerrangedecrease_Init();
    gt_RepeaterLanceCooldownReset_Init();
    gt_WildPowerChanges_Init();
    gt_WildfireDistanceCalc_Init();
    gt_WildfireLaunch_Init();
    gt_WildfireImpact_Init();
    gt_MomentumPreserver_Init();
    gt_AgainResets_Init();
    gt_DisguiseDeselect_Init();
    gt_DisguiseReselect_Init();
    gt_DisguiseRecolorMinionBars_Init();
    gt_TurretBehaviorFix_Init();
    gt_EnforceMineCounts_Init();
    gt_SpyCloakCooldownFix_Init();
    gt_CloakChargeCost_Init();
    gt_BasicForwarding_Init();
    gt_minionspawnpointassignments_Init();
    gt_minionwaves_Init();
    gt_InitialJungleSpawn_Init();
    gt_JungleDeathResponse_Init();
    gt_JungleLeash_Init();
    gt_MonsterUpgrades_Init();
    gt_PointDeathResponse_Init();
    gt_HeroDeathResponse_Init();
    gt_HeroKillTag_Init();
    gt_UpdatePowerPoints_Init();
    gt_revealerinit_Init();
    gt_captureperiodic_Init();
    gt_revealerperiodic_Init();
    gt_WestTopOuterInner_Init();
    gt_WestTopInnerInhibT_Init();
    gt_WestTopInhibTInhib_Init();
    gt_WestBotOuterInner_Init();
    gt_WestBotInnerInhibT_Init();
    gt_WestBotInhibTInhib_Init();
    gt_WestInhibsNexusT_Init();
    gt_WestNexusTNexus_Init();
    gt_EastTopOuterInner_Init();
    gt_EastTopInnerInhibT_Init();
    gt_EastTopInhibTInhib_Init();
    gt_EastBotOuterInner_Init();
    gt_EastBotInnerInhibT_Init();
    gt_EastBotInhibTInhib_Init();
    gt_EastInhibsNexusT_Init();
    gt_EastNexusTNexus_Init();
    gt_WestNexusdies_Init();
    gt_EastNexusdies_Init();
    gt_IncrementRespawnTimer_Init();
    gt_DeathResponseIngame_Init();
    gt_DeathResponseUI_Init();
    gt_UpdateBoxText_Init();
    gt_RespawnResponse_Init();
    gt_PlatformHealing_Init();
    gt_InitialBuildingInvulnerability_Init();
    gt_WestTurretBehavior_Init();
    gt_EastTurretBehavior_Init();
    gt_TurretDeath_Init();
    gt_MinionUpgrades_Init();
    gt_Recall_Init();
    gt_TeamPointsUpdateText_Init();
    gt_HeroButtonResponse_Init();
    gt_LockinButtonResponse_Init();
    gt_UpdateCHSLTimer_Init();
    gt_TimerBeeps_Init();
    gt_GameInitialization_Init();
    gt_ChampSelectEnding_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
